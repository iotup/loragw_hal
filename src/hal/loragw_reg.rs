use anyhow::{anyhow,Result};
use tracing::{debug, error, info, trace};

use super::error::Error;
use super::loragw_com::LoragwComTrait;

use super::{loragw_com::LgwSpiMuxTarget, mcu::command::{ECmdSpiTarget, EComWriteMode, MCU_SPI_REQ_TYPE_READ_WRITE}, Hal};
use std::fmt;

const SX1302_REG_EXT_MEM_PAGED_BASE_ADDR: u16 = 0x0;
const SX1302_REG_RX_BUFFER_BASE_ADDR: u16 = 0x4000;
const SX1302_REG_TX_TOP_A_BASE_ADDR: u16 = 0x5200;
const SX1302_REG_TX_TOP_B_BASE_ADDR: u16 = 0x5400;
const SX1302_REG_COMMON_BASE_ADDR: u16 = 0x5600;
const SX1302_REG_GPIO_BASE_ADDR: u16 = 0x5640;
const SX1302_REG_MBIST_BASE_ADDR: u16 = 0x56c0;
const SX1302_REG_RADIO_FE_BASE_ADDR: u16 = 0x5700;
const SX1302_REG_AGC_MCU_BASE_ADDR: u16 = 0x5780;
const SX1302_REG_CLK_CTRL_BASE_ADDR: u16 = 0x57c0;
const SX1302_REG_RX_TOP_BASE_ADDR: u16 = 0x5800;
const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR: u16 = 0x5b00;
const SX1302_REG_CAPTURE_RAM_BASE_ADDR: u16 = 0x6000;
const SX1302_REG_ARB_MCU_BASE_ADDR: u16 = 0x6080;
const SX1302_REG_TIMESTAMP_BASE_ADDR: u16 = 0x6100;
const SX1302_REG_OTP_BASE_ADDR: u16 = 0x6180;



pub const SX1302_REG_COMMON_PAGE_PAGE: u16 = 0;
pub const SX1302_REG_COMMON_CTRL0_CLK32_RIF_CTRL: u16 = 1;
pub const SX1302_REG_COMMON_CTRL0_HOST_RADIO_CTRL: u16 = 2;
pub const SX1302_REG_COMMON_CTRL0_RADIO_MISC_EN: u16 = 3;
pub const SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_B: u16 = 4;
pub const SX1302_REG_COMMON_CTRL0_SX1261_MODE_RADIO_A: u16 = 5;
pub const SX1302_REG_COMMON_CTRL1_SWAP_IQ_RADIO_B: u16 = 6;
pub const SX1302_REG_COMMON_CTRL1_SAMPLING_EDGE_RADIO_B: u16 = 7;
pub const SX1302_REG_COMMON_CTRL1_SWAP_IQ_RADIO_A: u16 = 8;
pub const SX1302_REG_COMMON_CTRL1_SAMPLING_EDGE_RADIO_A: u16 = 9;
pub const SX1302_REG_COMMON_SPI_DIV_RATIO_SPI_HALF_PERIOD: u16 = 10;
pub const SX1302_REG_COMMON_RADIO_SELECT_RADIO_SELECT: u16 = 11;
pub const SX1302_REG_COMMON_GEN_GLOBAL_EN: u16 = 12;
pub const SX1302_REG_COMMON_GEN_FSK_MODEM_ENABLE: u16 = 13;
pub const SX1302_REG_COMMON_GEN_CONCENTRATOR_MODEM_ENABLE: u16 = 14;
pub const SX1302_REG_COMMON_GEN_MBWSSF_MODEM_ENABLE: u16 = 15;
pub const SX1302_REG_COMMON_VERSION_VERSION: u16 = 16;
pub const SX1302_REG_COMMON_DUMMY_DUMMY: u16 = 17;
pub const SX1302_REG_AGC_MCU_CTRL_CLK_EN: u16 = 18;
pub const SX1302_REG_AGC_MCU_CTRL_FORCE_HOST_FE_CTRL: u16 = 19;
pub const SX1302_REG_AGC_MCU_CTRL_MCU_CLEAR: u16 = 20;
pub const SX1302_REG_AGC_MCU_CTRL_HOST_PROG: u16 = 21;
pub const SX1302_REG_AGC_MCU_CTRL_PARITY_ERROR: u16 = 22;
pub const SX1302_REG_AGC_MCU_MCU_AGC_STATUS_MCU_AGC_STATUS: u16 = 23;
pub const SX1302_REG_AGC_MCU_PA_GAIN_PA_B_GAIN: u16 = 24;
pub const SX1302_REG_AGC_MCU_PA_GAIN_PA_A_GAIN: u16 = 25;
pub const SX1302_REG_AGC_MCU_RF_EN_A_RADIO_RST: u16 = 26;
pub const SX1302_REG_AGC_MCU_RF_EN_A_RADIO_EN: u16 = 27;
pub const SX1302_REG_AGC_MCU_RF_EN_A_PA_EN: u16 = 28;
pub const SX1302_REG_AGC_MCU_RF_EN_A_LNA_EN: u16 = 29;
pub const SX1302_REG_AGC_MCU_RF_EN_B_RADIO_RST: u16 = 30;
pub const SX1302_REG_AGC_MCU_RF_EN_B_RADIO_EN: u16 = 31;
pub const SX1302_REG_AGC_MCU_RF_EN_B_PA_EN: u16 = 32;
pub const SX1302_REG_AGC_MCU_RF_EN_B_LNA_EN: u16 = 33;
pub const SX1302_REG_AGC_MCU_LUT_TABLE_A_PA_LUT: u16 = 34;
pub const SX1302_REG_AGC_MCU_LUT_TABLE_A_LNA_LUT: u16 = 35;
pub const SX1302_REG_AGC_MCU_LUT_TABLE_B_PA_LUT: u16 = 36;
pub const SX1302_REG_AGC_MCU_LUT_TABLE_B_LNA_LUT: u16 = 37;
pub const SX1302_REG_AGC_MCU_UART_CFG_MSBF: u16 = 38;
pub const SX1302_REG_AGC_MCU_UART_CFG_PAR_EN: u16 = 39;
pub const SX1302_REG_AGC_MCU_UART_CFG_PAR_MODE: u16 = 40;
pub const SX1302_REG_AGC_MCU_UART_CFG_START_LEN: u16 = 41;
pub const SX1302_REG_AGC_MCU_UART_CFG_STOP_LEN: u16 = 42;
pub const SX1302_REG_AGC_MCU_UART_CFG_WORD_LEN: u16 = 43;
pub const SX1302_REG_AGC_MCU_UART_CFG2_BIT_RATE: u16 = 44;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE3_MCU_MAIL_BOX_WR_DATA: u16 = 45;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA: u16 = 46;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA: u16 = 47;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA: u16 = 48;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE3_MCU_MAIL_BOX_RD_DATA: u16 = 49;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE2_MCU_MAIL_BOX_RD_DATA: u16 = 50;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE1_MCU_MAIL_BOX_RD_DATA: u16 = 51;
pub const SX1302_REG_AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE0_MCU_MAIL_BOX_RD_DATA: u16 = 52;
pub const SX1302_REG_AGC_MCU_DUMMY_DUMMY3: u16 = 53;
pub const SX1302_REG_CLK_CTRL_CLK_SEL_CLKDIV_EN: u16 = 54;
pub const SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL: u16 = 55;
pub const SX1302_REG_CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL: u16 = 56;
pub const SX1302_REG_CLK_CTRL_DUMMY_DUMMY: u16 = 57;
pub const SX1302_REG_TX_TOP_A_TX_TRIG_TX_FSM_CLR: u16 = 58;
pub const SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_GPS: u16 = 59;
pub const SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_DELAYED: u16 = 60;
pub const SX1302_REG_TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE: u16 = 61;
pub const SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG: u16 = 62;
pub const SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG: u16 = 63;
pub const SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG: u16 = 64;
pub const SX1302_REG_TX_TOP_A_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG: u16 = 65;
pub const SX1302_REG_TX_TOP_A_TX_START_DELAY_MSB_TX_START_DELAY: u16 = 66;
pub const SX1302_REG_TX_TOP_A_TX_START_DELAY_LSB_TX_START_DELAY: u16 = 67;
pub const SX1302_REG_TX_TOP_A_TX_CTRL_WRITE_BUFFER: u16 = 68;
pub const SX1302_REG_TX_TOP_A_TX_RAMP_DURATION_TX_RAMP_DURATION: u16 = 69;
pub const SX1302_REG_TX_TOP_A_GEN_CFG_0_MODULATION_TYPE: u16 = 70;
pub const SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_CTRL: u16 = 71;
pub const SX1302_REG_TX_TOP_A_TEST_0_TX_ACTIVE_SEL: u16 = 72;
pub const SX1302_REG_TX_TOP_A_TX_FLAG_TX_TIMEOUT: u16 = 73;
pub const SX1302_REG_TX_TOP_A_TX_FLAG_PKT_DONE: u16 = 74;
pub const SX1302_REG_TX_TOP_A_AGC_TX_BW_AGC_TX_BW: u16 = 75;
pub const SX1302_REG_TX_TOP_A_AGC_TX_PWR_AGC_TX_PWR: u16 = 76;
pub const SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT: u16 = 77;
pub const SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT: u16 = 78;
pub const SX1302_REG_TX_TOP_A_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT: u16 = 79;
pub const SX1302_REG_TX_TOP_A_TX_FSM_STATUS_TX_STATUS: u16 = 80;
pub const SX1302_REG_TX_TOP_A_DUMMY_CONTROL_DUMMY: u16 = 81;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_PLL_DIV_CTRL: u16 = 82;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE: u16 = 83;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE: u16 = 84;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST: u16 = 85;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_SRC: u16 = 86;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT: u16 = 87;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC: u16 = 88;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_IQ_GAIN_IQ_GAIN: u16 = 89;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET: u16 = 90;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET: u16 = 91;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_H_FREQ_RF: u16 = 92;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_M_FREQ_RF: u16 = 93;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_RF_L_FREQ_RF: u16 = 94;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV: u16 = 95;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV: u16 = 96;
pub const SX1302_REG_TX_TOP_A_TX_RFFE_IF_TEST_MOD_FREQ: u16 = 97;
pub const SX1302_REG_TX_TOP_A_DUMMY_MODULATOR_DUMMY: u16 = 98;
pub const SX1302_REG_TX_TOP_A_FSK_PKT_LEN_PKT_LENGTH: u16 = 99;
pub const SX1302_REG_TX_TOP_A_FSK_CFG_0_TX_CONT: u16 = 100;
pub const SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_IBM: u16 = 101;
pub const SX1302_REG_TX_TOP_A_FSK_CFG_0_DCFREE_ENC: u16 = 102;
pub const SX1302_REG_TX_TOP_A_FSK_CFG_0_CRC_EN: u16 = 103;
pub const SX1302_REG_TX_TOP_A_FSK_CFG_0_PKT_MODE: u16 = 104;
pub const SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE: u16 = 105;
pub const SX1302_REG_TX_TOP_A_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE: u16 = 106;
pub const SX1302_REG_TX_TOP_A_FSK_BIT_RATE_MSB_BIT_RATE: u16 = 107;
pub const SX1302_REG_TX_TOP_A_FSK_BIT_RATE_LSB_BIT_RATE: u16 = 108;
pub const SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_SIZE: u16 = 109;
pub const SX1302_REG_TX_TOP_A_FSK_MOD_FSK_PREAMBLE_SEQ: u16 = 110;
pub const SX1302_REG_TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_EN: u16 = 111;
pub const SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_SELECT_BT: u16 = 112;
pub const SX1302_REG_TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_EN: u16 = 113;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN: u16 = 114;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN: u16 = 115;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN: u16 = 116;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN: u16 = 117;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN: u16 = 118;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN: u16 = 119;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN: u16 = 120;
pub const SX1302_REG_TX_TOP_A_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN: u16 = 121;
pub const SX1302_REG_TX_TOP_A_DUMMY_GSFK_DUMMY: u16 = 122;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_BW: u16 = 123;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_0_MODEM_SF: u16 = 124;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL: u16 = 125;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET: u16 = 126;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG: u16 = 127;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_1_CODING_RATE: u16 = 128;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_2_FINE_SYNCH_EN: u16 = 129;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_2_MODEM_EN: u16 = 130;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CADRXTX: u16 = 131;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_2_IMPLICIT_HEADER: u16 = 132;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_2_CRC_EN: u16 = 133;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG0_3_PAYLOAD_LENGTH: u16 = 134;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE_EN: u16 = 135;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE: u16 = 136;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_1_MODEM_START: u16 = 137;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_1_HEADER_DIFF_MODE: u16 = 138;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_1_ZERO_PAD: u16 = 139;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_2_PREAMBLE_SYMB_NB: u16 = 140;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_3_PREAMBLE_SYMB_NB: u16 = 141;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_INT_DELAY: u16 = 142;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_RX: u16 = 143;
pub const SX1302_REG_TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_TX: u16 = 144;
pub const SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_LOWPASS: u16 = 145;
pub const SX1302_REG_TX_TOP_A_TX_CFG0_0_PPM_OFFSET_SIG: u16 = 146;
pub const SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTCHIRP: u16 = 147;
pub const SX1302_REG_TX_TOP_A_TX_CFG0_0_CHIRP_INVERT: u16 = 148;
pub const SX1302_REG_TX_TOP_A_TX_CFG0_0_CONTINUOUS: u16 = 149;
pub const SX1302_REG_TX_TOP_A_TX_CFG0_1_POWER_RANGING: u16 = 150;
pub const SX1302_REG_TX_TOP_A_TX_CFG1_0_FRAME_NB: u16 = 151;
pub const SX1302_REG_TX_TOP_A_TX_CFG1_1_HOP_CTRL: u16 = 152;
pub const SX1302_REG_TX_TOP_A_TX_CFG1_1_IFS: u16 = 153;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_AUTO_SCALE: u16 = 154;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_DROP_ON_SYNCH: u16 = 155;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_GAIN: u16 = 156;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_0_PEAK1_POS: u16 = 157;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_FINETIME_ON_LAST: u16 = 158;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_TIMEOUT_OPT: u16 = 159;
pub const SX1302_REG_TX_TOP_A_FRAME_SYNCH_1_PEAK2_POS: u16 = 160;
pub const SX1302_REG_TX_TOP_A_LORA_TX_STATE_STATUS: u16 = 161;
pub const SX1302_REG_TX_TOP_A_LORA_TX_FLAG_FRAME_DONE: u16 = 162;
pub const SX1302_REG_TX_TOP_A_LORA_TX_FLAG_CONT_DONE: u16 = 163;
pub const SX1302_REG_TX_TOP_A_LORA_TX_FLAG_PLD_DONE: u16 = 164;
pub const SX1302_REG_TX_TOP_A_DUMMY_LORA_DUMMY: u16 = 165;
pub const SX1302_REG_TX_TOP_B_TX_TRIG_TX_FSM_CLR: u16 = 166;
pub const SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_GPS: u16 = 167;
pub const SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_DELAYED: u16 = 168;
pub const SX1302_REG_TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE: u16 = 169;
pub const SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG: u16 = 170;
pub const SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG: u16 = 171;
pub const SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG: u16 = 172;
pub const SX1302_REG_TX_TOP_B_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG: u16 = 173;
pub const SX1302_REG_TX_TOP_B_TX_START_DELAY_MSB_TX_START_DELAY: u16 = 174;
pub const SX1302_REG_TX_TOP_B_TX_START_DELAY_LSB_TX_START_DELAY: u16 = 175;
pub const SX1302_REG_TX_TOP_B_TX_CTRL_WRITE_BUFFER: u16 = 176;
pub const SX1302_REG_TX_TOP_B_TX_RAMP_DURATION_TX_RAMP_DURATION: u16 = 177;
pub const SX1302_REG_TX_TOP_B_GEN_CFG_0_MODULATION_TYPE: u16 = 178;
pub const SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_CTRL: u16 = 179;
pub const SX1302_REG_TX_TOP_B_TEST_0_TX_ACTIVE_SEL: u16 = 180;
pub const SX1302_REG_TX_TOP_B_TX_FLAG_TX_TIMEOUT: u16 = 181;
pub const SX1302_REG_TX_TOP_B_TX_FLAG_PKT_DONE: u16 = 182;
pub const SX1302_REG_TX_TOP_B_AGC_TX_BW_AGC_TX_BW: u16 = 183;
pub const SX1302_REG_TX_TOP_B_AGC_TX_PWR_AGC_TX_PWR: u16 = 184;
pub const SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT: u16 = 185;
pub const SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT: u16 = 186;
pub const SX1302_REG_TX_TOP_B_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT: u16 = 187;
pub const SX1302_REG_TX_TOP_B_TX_FSM_STATUS_TX_STATUS: u16 = 188;
pub const SX1302_REG_TX_TOP_B_DUMMY_CONTROL_DUMMY: u16 = 189;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_PLL_DIV_CTRL: u16 = 190;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE: u16 = 191;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE: u16 = 192;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST: u16 = 193;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_SRC: u16 = 194;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT: u16 = 195;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC: u16 = 196;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_IQ_GAIN_IQ_GAIN: u16 = 197;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET: u16 = 198;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET: u16 = 199;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_H_FREQ_RF: u16 = 200;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_M_FREQ_RF: u16 = 201;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_RF_L_FREQ_RF: u16 = 202;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV: u16 = 203;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV: u16 = 204;
pub const SX1302_REG_TX_TOP_B_TX_RFFE_IF_TEST_MOD_FREQ: u16 = 205;
pub const SX1302_REG_TX_TOP_B_DUMMY_MODULATOR_DUMMY: u16 = 206;
pub const SX1302_REG_TX_TOP_B_FSK_PKT_LEN_PKT_LENGTH: u16 = 207;
pub const SX1302_REG_TX_TOP_B_FSK_CFG_0_TX_CONT: u16 = 208;
pub const SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_IBM: u16 = 209;
pub const SX1302_REG_TX_TOP_B_FSK_CFG_0_DCFREE_ENC: u16 = 210;
pub const SX1302_REG_TX_TOP_B_FSK_CFG_0_CRC_EN: u16 = 211;
pub const SX1302_REG_TX_TOP_B_FSK_CFG_0_PKT_MODE: u16 = 212;
pub const SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE: u16 = 213;
pub const SX1302_REG_TX_TOP_B_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE: u16 = 214;
pub const SX1302_REG_TX_TOP_B_FSK_BIT_RATE_MSB_BIT_RATE: u16 = 215;
pub const SX1302_REG_TX_TOP_B_FSK_BIT_RATE_LSB_BIT_RATE: u16 = 216;
pub const SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_SIZE: u16 = 217;
pub const SX1302_REG_TX_TOP_B_FSK_MOD_FSK_PREAMBLE_SEQ: u16 = 218;
pub const SX1302_REG_TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_EN: u16 = 219;
pub const SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_SELECT_BT: u16 = 220;
pub const SX1302_REG_TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_EN: u16 = 221;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN: u16 = 222;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN: u16 = 223;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN: u16 = 224;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN: u16 = 225;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN: u16 = 226;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN: u16 = 227;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN: u16 = 228;
pub const SX1302_REG_TX_TOP_B_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN: u16 = 229;
pub const SX1302_REG_TX_TOP_B_DUMMY_GSFK_DUMMY: u16 = 230;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_BW: u16 = 231;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_0_MODEM_SF: u16 = 232;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL: u16 = 233;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET: u16 = 234;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG: u16 = 235;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_1_CODING_RATE: u16 = 236;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_2_FINE_SYNCH_EN: u16 = 237;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_2_MODEM_EN: u16 = 238;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CADRXTX: u16 = 239;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_2_IMPLICIT_HEADER: u16 = 240;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_2_CRC_EN: u16 = 241;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG0_3_PAYLOAD_LENGTH: u16 = 242;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE_EN: u16 = 243;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE: u16 = 244;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_1_MODEM_START: u16 = 245;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_1_HEADER_DIFF_MODE: u16 = 246;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_1_ZERO_PAD: u16 = 247;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_2_PREAMBLE_SYMB_NB: u16 = 248;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_3_PREAMBLE_SYMB_NB: u16 = 249;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_INT_DELAY: u16 = 250;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_RX: u16 = 251;
pub const SX1302_REG_TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_TX: u16 = 252;
pub const SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_LOWPASS: u16 = 253;
pub const SX1302_REG_TX_TOP_B_TX_CFG0_0_PPM_OFFSET_SIG: u16 = 254;
pub const SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTCHIRP: u16 = 255;
pub const SX1302_REG_TX_TOP_B_TX_CFG0_0_CHIRP_INVERT: u16 = 256;
pub const SX1302_REG_TX_TOP_B_TX_CFG0_0_CONTINUOUS: u16 = 257;
pub const SX1302_REG_TX_TOP_B_TX_CFG0_1_POWER_RANGING: u16 = 258;
pub const SX1302_REG_TX_TOP_B_TX_CFG1_0_FRAME_NB: u16 = 259;
pub const SX1302_REG_TX_TOP_B_TX_CFG1_1_HOP_CTRL: u16 = 260;
pub const SX1302_REG_TX_TOP_B_TX_CFG1_1_IFS: u16 = 261;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_AUTO_SCALE: u16 = 262;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_DROP_ON_SYNCH: u16 = 263;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_GAIN: u16 = 264;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_0_PEAK1_POS: u16 = 265;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_FINETIME_ON_LAST: u16 = 266;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_TIMEOUT_OPT: u16 = 267;
pub const SX1302_REG_TX_TOP_B_FRAME_SYNCH_1_PEAK2_POS: u16 = 268;
pub const SX1302_REG_TX_TOP_B_LORA_TX_STATE_STATUS: u16 = 269;
pub const SX1302_REG_TX_TOP_B_LORA_TX_FLAG_FRAME_DONE: u16 = 270;
pub const SX1302_REG_TX_TOP_B_LORA_TX_FLAG_CONT_DONE: u16 = 271;
pub const SX1302_REG_TX_TOP_B_LORA_TX_FLAG_PLD_DONE: u16 = 272;
pub const SX1302_REG_TX_TOP_B_DUMMY_LORA_DUMMY: u16 = 273;
pub const SX1302_REG_GPIO_GPIO_DIR_H_DIRECTION: u16 = 274;
pub const SX1302_REG_GPIO_GPIO_DIR_L_DIRECTION: u16 = 275;
pub const SX1302_REG_GPIO_GPIO_OUT_H_OUT_VALUE: u16 = 276;
pub const SX1302_REG_GPIO_GPIO_OUT_L_OUT_VALUE: u16 = 277;
pub const SX1302_REG_GPIO_GPIO_IN_H_IN_VALUE: u16 = 278;
pub const SX1302_REG_GPIO_GPIO_IN_L_IN_VALUE: u16 = 279;
pub const SX1302_REG_GPIO_GPIO_PD_H_PD_VALUE: u16 = 280;
pub const SX1302_REG_GPIO_GPIO_PD_L_PD_VALUE: u16 = 281;
pub const SX1302_REG_GPIO_GPIO_SEL_0_SELECTION: u16 = 282;
pub const SX1302_REG_GPIO_GPIO_SEL_1_SELECTION: u16 = 283;
pub const SX1302_REG_GPIO_GPIO_SEL_2_SELECTION: u16 = 284;
pub const SX1302_REG_GPIO_GPIO_SEL_3_SELECTION: u16 = 285;
pub const SX1302_REG_GPIO_GPIO_SEL_4_SELECTION: u16 = 286;
pub const SX1302_REG_GPIO_GPIO_SEL_5_SELECTION: u16 = 287;
pub const SX1302_REG_GPIO_GPIO_SEL_6_SELECTION: u16 = 288;
pub const SX1302_REG_GPIO_GPIO_SEL_7_SELECTION: u16 = 289;
pub const SX1302_REG_GPIO_GPIO_SEL_8_11_GPIO_11_9_SEL: u16 = 290;
pub const SX1302_REG_GPIO_GPIO_SEL_8_11_GPIO_8_SEL: u16 = 291;
pub const SX1302_REG_GPIO_HOST_IRQ_TX_TIMEOUT_B: u16 = 292;
pub const SX1302_REG_GPIO_HOST_IRQ_TX_TIMEOUT_A: u16 = 293;
pub const SX1302_REG_GPIO_HOST_IRQ_TX_DONE_B: u16 = 294;
pub const SX1302_REG_GPIO_HOST_IRQ_TX_DONE_A: u16 = 295;
pub const SX1302_REG_GPIO_HOST_IRQ_TIMESTAMP: u16 = 296;
pub const SX1302_REG_GPIO_HOST_IRQ_RX_BUFFER_WATERMARK: u16 = 297;
pub const SX1302_REG_GPIO_HOST_IRQ_EN_TX_TIMEOUT_B: u16 = 298;
pub const SX1302_REG_GPIO_HOST_IRQ_EN_TX_TIMEOUT_A: u16 = 299;
pub const SX1302_REG_GPIO_HOST_IRQ_EN_TX_DONE_B: u16 = 300;
pub const SX1302_REG_GPIO_HOST_IRQ_EN_TX_DONE_A: u16 = 301;
pub const SX1302_REG_GPIO_HOST_IRQ_EN_TIMESTAMP: u16 = 302;
pub const SX1302_REG_GPIO_HOST_IRQ_EN_RX_BUFFER_WATERMARK: u16 = 303;
pub const SX1302_REG_GPIO_DUMMY_DUMMY: u16 = 304;
pub const SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_POL: u16 = 305;
pub const SX1302_REG_TIMESTAMP_GPS_CTRL_GPS_EN: u16 = 306;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS: u16 = 307;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_MSB1_TIMESTAMP_PPS: u16 = 308;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_LSB2_TIMESTAMP_PPS: u16 = 309;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_PPS_LSB1_TIMESTAMP_PPS: u16 = 310;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP: u16 = 311;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_MSB1_TIMESTAMP: u16 = 312;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_LSB2_TIMESTAMP: u16 = 313;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_LSB1_TIMESTAMP: u16 = 314;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_SET3_TIMESTAMP: u16 = 315;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_SET2_TIMESTAMP: u16 = 316;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_SET1_TIMESTAMP: u16 = 317;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_SET0_TIMESTAMP: u16 = 318;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_3_TIMESTAMP: u16 = 319;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_2_TIMESTAMP: u16 = 320;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_1_TIMESTAMP: u16 = 321;
pub const SX1302_REG_TIMESTAMP_TIMESTAMP_IRQ_0_TIMESTAMP: u16 = 322;
pub const SX1302_REG_TIMESTAMP_DUMMY_DUMMY: u16 = 323;
pub const SX1302_REG_RX_TOP_FREQ_0_MSB_IF_FREQ_0: u16 = 324;
pub const SX1302_REG_RX_TOP_FREQ_0_LSB_IF_FREQ_0: u16 = 325;
pub const SX1302_REG_RX_TOP_FREQ_1_MSB_IF_FREQ_1: u16 = 326;
pub const SX1302_REG_RX_TOP_FREQ_1_LSB_IF_FREQ_1: u16 = 327;
pub const SX1302_REG_RX_TOP_FREQ_2_MSB_IF_FREQ_2: u16 = 328;
pub const SX1302_REG_RX_TOP_FREQ_2_LSB_IF_FREQ_2: u16 = 329;
pub const SX1302_REG_RX_TOP_FREQ_3_MSB_IF_FREQ_3: u16 = 330;
pub const SX1302_REG_RX_TOP_FREQ_3_LSB_IF_FREQ_3: u16 = 331;
pub const SX1302_REG_RX_TOP_FREQ_4_MSB_IF_FREQ_4: u16 = 332;
pub const SX1302_REG_RX_TOP_FREQ_4_LSB_IF_FREQ_4: u16 = 333;
pub const SX1302_REG_RX_TOP_FREQ_5_MSB_IF_FREQ_5: u16 = 334;
pub const SX1302_REG_RX_TOP_FREQ_5_LSB_IF_FREQ_5: u16 = 335;
pub const SX1302_REG_RX_TOP_FREQ_6_MSB_IF_FREQ_6: u16 = 336;
pub const SX1302_REG_RX_TOP_FREQ_6_LSB_IF_FREQ_6: u16 = 337;
pub const SX1302_REG_RX_TOP_FREQ_7_MSB_IF_FREQ_7: u16 = 338;
pub const SX1302_REG_RX_TOP_FREQ_7_LSB_IF_FREQ_7: u16 = 339;
pub const SX1302_REG_RX_TOP_RADIO_SELECT_RADIO_SELECT: u16 = 340;
pub const SX1302_REG_RX_TOP_RSSI_CONTROL_RSSI_FILTER_ALPHA: u16 = 341;
pub const SX1302_REG_RX_TOP_RSSI_CONTROL_SELECT_RSSI: u16 = 342;
pub const SX1302_REG_RX_TOP_RSSI_DEF_VALUE_CHAN_RSSI_DEF_VALUE: u16 = 343;
pub const SX1302_REG_RX_TOP_CHANN_DAGC_CFG1_CHAN_DAGC_THRESHOLD_HIGH: u16 = 344;
pub const SX1302_REG_RX_TOP_CHANN_DAGC_CFG2_CHAN_DAGC_THRESHOLD_LOW: u16 = 345;
pub const SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MAX_ATTEN: u16 = 346;
pub const SX1302_REG_RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MIN_ATTEN: u16 = 347;
pub const SX1302_REG_RX_TOP_CHANN_DAGC_CFG4_CHAN_DAGC_STEP: u16 = 348;
pub const SX1302_REG_RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE: u16 = 349;
pub const SX1302_REG_RX_TOP_RSSI_VALUE_CHAN_RSSI: u16 = 350;
pub const SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN_VALID: u16 = 351;
pub const SX1302_REG_RX_TOP_GAIN_CONTROL_CHAN_GAIN: u16 = 352;
pub const SX1302_REG_RX_TOP_CLK_CONTROL_CHAN_CLK_EN: u16 = 353;
pub const SX1302_REG_RX_TOP_DUMMY0_DUMMY0: u16 = 354;
pub const SX1302_REG_RX_TOP_CORR_CLOCK_ENABLE_CLK_EN: u16 = 355;
pub const SX1302_REG_RX_TOP_CORRELATOR_EN_CORR_EN: u16 = 356;
pub const SX1302_REG_RX_TOP_CORRELATOR_SF_EN_CORR_SF_EN: u16 = 357;
pub const SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ONLY_FIRST_DET_EDGE_ENABLE_ONLY_FIRST_DET_EDGE: u16 = 358;
pub const SX1302_REG_RX_TOP_CORRELATOR_ENABLE_ACC_CLEAR_ENABLE_CORR_ACC_CLEAR: u16 = 359;
pub const SX1302_REG_RX_TOP_SF5_CFG1_ACC_WIN_LEN: u16 = 360;
pub const SX1302_REG_RX_TOP_SF5_CFG1_ACC_PEAK_SUM_EN: u16 = 361;
pub const SX1302_REG_RX_TOP_SF5_CFG1_ACC_PEAK_POS_SEL: u16 = 362;
pub const SX1302_REG_RX_TOP_SF5_CFG1_ACC_COEFF: u16 = 363;
pub const SX1302_REG_RX_TOP_SF5_CFG1_ACC_AUTO_RESCALE: u16 = 364;
pub const SX1302_REG_RX_TOP_SF5_CFG1_ACC_2_SAME_PEAKS: u16 = 365;
pub const SX1302_REG_RX_TOP_SF5_CFG2_ACC_MIN2: u16 = 366;
pub const SX1302_REG_RX_TOP_SF5_CFG2_ACC_PNR: u16 = 367;
pub const SX1302_REG_RX_TOP_SF5_CFG3_MIN_SINGLE_PEAK: u16 = 368;
pub const SX1302_REG_RX_TOP_SF5_CFG4_MSP_PNR: u16 = 369;
pub const SX1302_REG_RX_TOP_SF5_CFG5_MSP2_PNR: u16 = 370;
pub const SX1302_REG_RX_TOP_SF5_CFG6_MSP_PEAK_NB: u16 = 371;
pub const SX1302_REG_RX_TOP_SF5_CFG6_MSP_CNT_MODE: u16 = 372;
pub const SX1302_REG_RX_TOP_SF5_CFG6_MSP_POS_SEL: u16 = 373;
pub const SX1302_REG_RX_TOP_SF5_CFG7_MSP2_PEAK_NB: u16 = 374;
pub const SX1302_REG_RX_TOP_SF5_CFG7_NOISE_COEFF: u16 = 375;
pub const SX1302_REG_RX_TOP_SF6_CFG1_ACC_WIN_LEN: u16 = 376;
pub const SX1302_REG_RX_TOP_SF6_CFG1_ACC_PEAK_SUM_EN: u16 = 377;
pub const SX1302_REG_RX_TOP_SF6_CFG1_ACC_PEAK_POS_SEL: u16 = 378;
pub const SX1302_REG_RX_TOP_SF6_CFG1_ACC_COEFF: u16 = 379;
pub const SX1302_REG_RX_TOP_SF6_CFG1_ACC_AUTO_RESCALE: u16 = 380;
pub const SX1302_REG_RX_TOP_SF6_CFG1_ACC_2_SAME_PEAKS: u16 = 381;
pub const SX1302_REG_RX_TOP_SF6_CFG2_ACC_MIN2: u16 = 382;
pub const SX1302_REG_RX_TOP_SF6_CFG2_ACC_PNR: u16 = 383;
pub const SX1302_REG_RX_TOP_SF6_CFG3_MIN_SINGLE_PEAK: u16 = 384;
pub const SX1302_REG_RX_TOP_SF6_CFG4_MSP_PNR: u16 = 385;
pub const SX1302_REG_RX_TOP_SF6_CFG5_MSP2_PNR: u16 = 386;
pub const SX1302_REG_RX_TOP_SF6_CFG6_MSP_PEAK_NB: u16 = 387;
pub const SX1302_REG_RX_TOP_SF6_CFG6_MSP_CNT_MODE: u16 = 388;
pub const SX1302_REG_RX_TOP_SF6_CFG6_MSP_POS_SEL: u16 = 389;
pub const SX1302_REG_RX_TOP_SF6_CFG7_MSP2_PEAK_NB: u16 = 390;
pub const SX1302_REG_RX_TOP_SF6_CFG7_NOISE_COEFF: u16 = 391;
pub const SX1302_REG_RX_TOP_SF7_CFG1_ACC_WIN_LEN: u16 = 392;
pub const SX1302_REG_RX_TOP_SF7_CFG1_ACC_PEAK_SUM_EN: u16 = 393;
pub const SX1302_REG_RX_TOP_SF7_CFG1_ACC_PEAK_POS_SEL: u16 = 394;
pub const SX1302_REG_RX_TOP_SF7_CFG1_ACC_COEFF: u16 = 395;
pub const SX1302_REG_RX_TOP_SF7_CFG1_ACC_AUTO_RESCALE: u16 = 396;
pub const SX1302_REG_RX_TOP_SF7_CFG1_ACC_2_SAME_PEAKS: u16 = 397;
pub const SX1302_REG_RX_TOP_SF7_CFG2_ACC_MIN2: u16 = 398;
pub const SX1302_REG_RX_TOP_SF7_CFG2_ACC_PNR: u16 = 399;
pub const SX1302_REG_RX_TOP_SF7_CFG3_MIN_SINGLE_PEAK: u16 = 400;
pub const SX1302_REG_RX_TOP_SF7_CFG4_MSP_PNR: u16 = 401;
pub const SX1302_REG_RX_TOP_SF7_CFG5_MSP2_PNR: u16 = 402;
pub const SX1302_REG_RX_TOP_SF7_CFG6_MSP_PEAK_NB: u16 = 403;
pub const SX1302_REG_RX_TOP_SF7_CFG6_MSP_CNT_MODE: u16 = 404;
pub const SX1302_REG_RX_TOP_SF7_CFG6_MSP_POS_SEL: u16 = 405;
pub const SX1302_REG_RX_TOP_SF7_CFG7_MSP2_PEAK_NB: u16 = 406;
pub const SX1302_REG_RX_TOP_SF7_CFG7_NOISE_COEFF: u16 = 407;
pub const SX1302_REG_RX_TOP_SF8_CFG1_ACC_WIN_LEN: u16 = 408;
pub const SX1302_REG_RX_TOP_SF8_CFG1_ACC_PEAK_SUM_EN: u16 = 409;
pub const SX1302_REG_RX_TOP_SF8_CFG1_ACC_PEAK_POS_SEL: u16 = 410;
pub const SX1302_REG_RX_TOP_SF8_CFG1_ACC_COEFF: u16 = 411;
pub const SX1302_REG_RX_TOP_SF8_CFG1_ACC_AUTO_RESCALE: u16 = 412;
pub const SX1302_REG_RX_TOP_SF8_CFG1_ACC_2_SAME_PEAKS: u16 = 413;
pub const SX1302_REG_RX_TOP_SF8_CFG2_ACC_MIN2: u16 = 414;
pub const SX1302_REG_RX_TOP_SF8_CFG2_ACC_PNR: u16 = 415;
pub const SX1302_REG_RX_TOP_SF8_CFG3_MIN_SINGLE_PEAK: u16 = 416;
pub const SX1302_REG_RX_TOP_SF8_CFG4_MSP_PNR: u16 = 417;
pub const SX1302_REG_RX_TOP_SF8_CFG5_MSP2_PNR: u16 = 418;
pub const SX1302_REG_RX_TOP_SF8_CFG6_MSP_PEAK_NB: u16 = 419;
pub const SX1302_REG_RX_TOP_SF8_CFG6_MSP_CNT_MODE: u16 = 420;
pub const SX1302_REG_RX_TOP_SF8_CFG6_MSP_POS_SEL: u16 = 421;
pub const SX1302_REG_RX_TOP_SF8_CFG7_MSP2_PEAK_NB: u16 = 422;
pub const SX1302_REG_RX_TOP_SF8_CFG7_NOISE_COEFF: u16 = 423;
pub const SX1302_REG_RX_TOP_SF9_CFG1_ACC_WIN_LEN: u16 = 424;
pub const SX1302_REG_RX_TOP_SF9_CFG1_ACC_PEAK_SUM_EN: u16 = 425;
pub const SX1302_REG_RX_TOP_SF9_CFG1_ACC_PEAK_POS_SEL: u16 = 426;
pub const SX1302_REG_RX_TOP_SF9_CFG1_ACC_COEFF: u16 = 427;
pub const SX1302_REG_RX_TOP_SF9_CFG1_ACC_AUTO_RESCALE: u16 = 428;
pub const SX1302_REG_RX_TOP_SF9_CFG1_ACC_2_SAME_PEAKS: u16 = 429;
pub const SX1302_REG_RX_TOP_SF9_CFG2_ACC_MIN2: u16 = 430;
pub const SX1302_REG_RX_TOP_SF9_CFG2_ACC_PNR: u16 = 431;
pub const SX1302_REG_RX_TOP_SF9_CFG3_MIN_SINGLE_PEAK: u16 = 432;
pub const SX1302_REG_RX_TOP_SF9_CFG4_MSP_PNR: u16 = 433;
pub const SX1302_REG_RX_TOP_SF9_CFG5_MSP2_PNR: u16 = 434;
pub const SX1302_REG_RX_TOP_SF9_CFG6_MSP_PEAK_NB: u16 = 435;
pub const SX1302_REG_RX_TOP_SF9_CFG6_MSP_CNT_MODE: u16 = 436;
pub const SX1302_REG_RX_TOP_SF9_CFG6_MSP_POS_SEL: u16 = 437;
pub const SX1302_REG_RX_TOP_SF9_CFG7_MSP2_PEAK_NB: u16 = 438;
pub const SX1302_REG_RX_TOP_SF9_CFG7_NOISE_COEFF: u16 = 439;
pub const SX1302_REG_RX_TOP_SF10_CFG1_ACC_WIN_LEN: u16 = 440;
pub const SX1302_REG_RX_TOP_SF10_CFG1_ACC_PEAK_SUM_EN: u16 = 441;
pub const SX1302_REG_RX_TOP_SF10_CFG1_ACC_PEAK_POS_SEL: u16 = 442;
pub const SX1302_REG_RX_TOP_SF10_CFG1_ACC_COEFF: u16 = 443;
pub const SX1302_REG_RX_TOP_SF10_CFG1_ACC_AUTO_RESCALE: u16 = 444;
pub const SX1302_REG_RX_TOP_SF10_CFG1_ACC_2_SAME_PEAKS: u16 = 445;
pub const SX1302_REG_RX_TOP_SF10_CFG2_ACC_MIN2: u16 = 446;
pub const SX1302_REG_RX_TOP_SF10_CFG2_ACC_PNR: u16 = 447;
pub const SX1302_REG_RX_TOP_SF10_CFG3_MIN_SINGLE_PEAK: u16 = 448;
pub const SX1302_REG_RX_TOP_SF10_CFG4_MSP_PNR: u16 = 449;
pub const SX1302_REG_RX_TOP_SF10_CFG5_MSP2_PNR: u16 = 450;
pub const SX1302_REG_RX_TOP_SF10_CFG6_MSP_PEAK_NB: u16 = 451;
pub const SX1302_REG_RX_TOP_SF10_CFG6_MSP_CNT_MODE: u16 = 452;
pub const SX1302_REG_RX_TOP_SF10_CFG6_MSP_POS_SEL: u16 = 453;
pub const SX1302_REG_RX_TOP_SF10_CFG7_MSP2_PEAK_NB: u16 = 454;
pub const SX1302_REG_RX_TOP_SF10_CFG7_NOISE_COEFF: u16 = 455;
pub const SX1302_REG_RX_TOP_SF11_CFG1_ACC_WIN_LEN: u16 = 456;
pub const SX1302_REG_RX_TOP_SF11_CFG1_ACC_PEAK_SUM_EN: u16 = 457;
pub const SX1302_REG_RX_TOP_SF11_CFG1_ACC_PEAK_POS_SEL: u16 = 458;
pub const SX1302_REG_RX_TOP_SF11_CFG1_ACC_COEFF: u16 = 459;
pub const SX1302_REG_RX_TOP_SF11_CFG1_ACC_AUTO_RESCALE: u16 = 460;
pub const SX1302_REG_RX_TOP_SF11_CFG1_ACC_2_SAME_PEAKS: u16 = 461;
pub const SX1302_REG_RX_TOP_SF11_CFG2_ACC_MIN2: u16 = 462;
pub const SX1302_REG_RX_TOP_SF11_CFG2_ACC_PNR: u16 = 463;
pub const SX1302_REG_RX_TOP_SF11_CFG3_MIN_SINGLE_PEAK: u16 = 464;
pub const SX1302_REG_RX_TOP_SF11_CFG4_MSP_PNR: u16 = 465;
pub const SX1302_REG_RX_TOP_SF11_CFG5_MSP2_PNR: u16 = 466;
pub const SX1302_REG_RX_TOP_SF11_CFG6_MSP_PEAK_NB: u16 = 467;
pub const SX1302_REG_RX_TOP_SF11_CFG6_MSP_CNT_MODE: u16 = 468;
pub const SX1302_REG_RX_TOP_SF11_CFG6_MSP_POS_SEL: u16 = 469;
pub const SX1302_REG_RX_TOP_SF11_CFG7_MSP2_PEAK_NB: u16 = 470;
pub const SX1302_REG_RX_TOP_SF11_CFG7_NOISE_COEFF: u16 = 471;
pub const SX1302_REG_RX_TOP_SF12_CFG1_ACC_WIN_LEN: u16 = 472;
pub const SX1302_REG_RX_TOP_SF12_CFG1_ACC_PEAK_SUM_EN: u16 = 473;
pub const SX1302_REG_RX_TOP_SF12_CFG1_ACC_PEAK_POS_SEL: u16 = 474;
pub const SX1302_REG_RX_TOP_SF12_CFG1_ACC_COEFF: u16 = 475;
pub const SX1302_REG_RX_TOP_SF12_CFG1_ACC_AUTO_RESCALE: u16 = 476;
pub const SX1302_REG_RX_TOP_SF12_CFG1_ACC_2_SAME_PEAKS: u16 = 477;
pub const SX1302_REG_RX_TOP_SF12_CFG2_ACC_MIN2: u16 = 478;
pub const SX1302_REG_RX_TOP_SF12_CFG2_ACC_PNR: u16 = 479;
pub const SX1302_REG_RX_TOP_SF12_CFG3_MIN_SINGLE_PEAK: u16 = 480;
pub const SX1302_REG_RX_TOP_SF12_CFG4_MSP_PNR: u16 = 481;
pub const SX1302_REG_RX_TOP_SF12_CFG5_MSP2_PNR: u16 = 482;
pub const SX1302_REG_RX_TOP_SF12_CFG6_MSP_PEAK_NB: u16 = 483;
pub const SX1302_REG_RX_TOP_SF12_CFG6_MSP_CNT_MODE: u16 = 484;
pub const SX1302_REG_RX_TOP_SF12_CFG6_MSP_POS_SEL: u16 = 485;
pub const SX1302_REG_RX_TOP_SF12_CFG7_MSP2_PEAK_NB: u16 = 486;
pub const SX1302_REG_RX_TOP_SF12_CFG7_NOISE_COEFF: u16 = 487;
pub const SX1302_REG_RX_TOP_DUMMY1_DUMMY1: u16 = 488;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG1_BW_START: u16 = 489;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG1_AUTO_BW_RED: u16 = 490;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG1_NO_FAST_START: u16 = 491;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG1_BYPASS: u16 = 492;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG1_ENABLE: u16 = 493;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG2_BW_LOCKED: u16 = 494;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG2_BW: u16 = 495;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG3_BW_RED: u16 = 496;
pub const SX1302_REG_RX_TOP_DC_NOTCH_CFG4_IIR_DCC_TIME: u16 = 497;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_0_FIR1_COEFF_0: u16 = 498;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_1_FIR1_COEFF_1: u16 = 499;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_2_FIR1_COEFF_2: u16 = 500;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_3_FIR1_COEFF_3: u16 = 501;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_4_FIR1_COEFF_4: u16 = 502;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_5_FIR1_COEFF_5: u16 = 503;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_6_FIR1_COEFF_6: u16 = 504;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR1_7_FIR1_COEFF_7: u16 = 505;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_0_FIR2_COEFF_0: u16 = 506;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_1_FIR2_COEFF_1: u16 = 507;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_2_FIR2_COEFF_2: u16 = 508;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_3_FIR2_COEFF_3: u16 = 509;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_4_FIR2_COEFF_4: u16 = 510;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_5_FIR2_COEFF_5: u16 = 511;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_6_FIR2_COEFF_6: u16 = 512;
pub const SX1302_REG_RX_TOP_RX_DFE_FIR2_7_FIR2_COEFF_7: u16 = 513;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_SEL: u16 = 514;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_DB: u16 = 515;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC1_DC_COMP_EN: u16 = 516;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC1_FORCE_DEFAULT_FIR: u16 = 517;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC1_RSSI_EARLY_LATCH: u16 = 518;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC1_FREEZE_ON_SYNC: u16 = 519;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC2_DAGC_IN_COMP: u16 = 520;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC2_DAGC_FIR_HYST: u16 = 521;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC2_RSSI_MAX_SAMPLE: u16 = 522;
pub const SX1302_REG_RX_TOP_RX_DFE_AGC2_RSSI_MIN_SAMPLE: u16 = 523;
pub const SX1302_REG_RX_TOP_RX_DFE_GAIN0_DAGC_FIR_FAST: u16 = 524;
pub const SX1302_REG_RX_TOP_RX_DFE_GAIN0_FORCE_GAIN_FIR: u16 = 525;
pub const SX1302_REG_RX_TOP_RX_DFE_GAIN0_GAIN_FIR1: u16 = 526;
pub const SX1302_REG_RX_TOP_RX_DFE_GAIN0_GAIN_FIR2: u16 = 527;
pub const SX1302_REG_RX_TOP_DAGC_CFG_TARGET_LVL: u16 = 528;
pub const SX1302_REG_RX_TOP_DAGC_CFG_GAIN_INCR_STEP: u16 = 529;
pub const SX1302_REG_RX_TOP_DAGC_CFG_GAIN_DROP_COMP: u16 = 530;
pub const SX1302_REG_RX_TOP_DAGC_CFG_COMB_FILTER_EN: u16 = 531;
pub const SX1302_REG_RX_TOP_DAGC_CFG_NO_FREEZE_START: u16 = 532;
pub const SX1302_REG_RX_TOP_DAGC_CFG_FREEZE_ON_SYNC: u16 = 533;
pub const SX1302_REG_RX_TOP_DAGC_CNT0_SAMPLE: u16 = 534;
pub const SX1302_REG_RX_TOP_DAGC_CNT1_THR_M6: u16 = 535;
pub const SX1302_REG_RX_TOP_DAGC_CNT2_THR_M12: u16 = 536;
pub const SX1302_REG_RX_TOP_DAGC_CNT3_THR_M18: u16 = 537;
pub const SX1302_REG_RX_TOP_DAGC_CNT4_GAIN: u16 = 538;
pub const SX1302_REG_RX_TOP_DAGC_CNT4_FORCE_GAIN: u16 = 539;
pub const SX1302_REG_RX_TOP_TXRX_CFG1_PPM_OFFSET_HDR_CTRL: u16 = 540;
pub const SX1302_REG_RX_TOP_TXRX_CFG1_PPM_OFFSET: u16 = 541;
pub const SX1302_REG_RX_TOP_TXRX_CFG1_MODEM_EN: u16 = 542;
pub const SX1302_REG_RX_TOP_TXRX_CFG1_CODING_RATE: u16 = 543;
pub const SX1302_REG_RX_TOP_TXRX_CFG2_MODEM_START: u16 = 544;
pub const SX1302_REG_RX_TOP_TXRX_CFG2_CADRXTX: u16 = 545;
pub const SX1302_REG_RX_TOP_TXRX_CFG2_IMPLICIT_HEADER: u16 = 546;
pub const SX1302_REG_RX_TOP_TXRX_CFG2_CRC_EN: u16 = 547;
pub const SX1302_REG_RX_TOP_TXRX_CFG3_PAYLOAD_LENGTH: u16 = 548;
pub const SX1302_REG_RX_TOP_TXRX_CFG4_INT_STEP_ORIDE_EN: u16 = 549;
pub const SX1302_REG_RX_TOP_TXRX_CFG4_INT_STEP_ORIDE: u16 = 550;
pub const SX1302_REG_RX_TOP_TXRX_CFG5_HEADER_DIFF_MODE: u16 = 551;
pub const SX1302_REG_RX_TOP_TXRX_CFG5_ZERO_PAD: u16 = 552;
pub const SX1302_REG_RX_TOP_TXRX_CFG6_PREAMBLE_SYMB_NB: u16 = 553;
pub const SX1302_REG_RX_TOP_TXRX_CFG7_PREAMBLE_SYMB_NB: u16 = 554;
pub const SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_INT_DELAY: u16 = 555;
pub const SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_RX: u16 = 556;
pub const SX1302_REG_RX_TOP_TXRX_CFG8_AUTO_ACK_TX: u16 = 557;
pub const SX1302_REG_RX_TOP_TXRX_CFG8_POST_PREAMBLE_GAP_LONG: u16 = 558;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF12: u16 = 559;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF11: u16 = 560;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF10: u16 = 561;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF9: u16 = 562;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF8: u16 = 563;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF7: u16 = 564;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF6: u16 = 565;
pub const SX1302_REG_RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF5: u16 = 566;
pub const SX1302_REG_RX_TOP_RX_CFG0_DFT_PEAK_EN: u16 = 567;
pub const SX1302_REG_RX_TOP_RX_CFG0_CHIRP_INVERT: u16 = 568;
pub const SX1302_REG_RX_TOP_RX_CFG0_SWAP_IQ: u16 = 569;
pub const SX1302_REG_RX_TOP_RX_CFG0_CONTINUOUS: u16 = 570;
pub const SX1302_REG_RX_TOP_RX_CFG1_DETECT_TIMEOUT: u16 = 571;
pub const SX1302_REG_RX_TOP_RX_CFG2_CLK_EN_RESYNC_DIN: u16 = 572;
pub const SX1302_REG_RX_TOP_RX_CFG2_LLR_SCALE: u16 = 573;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH0_SF5_PEAK1_POS_SF5: u16 = 574;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH1_SF5_PEAK2_POS_SF5: u16 = 575;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH0_SF6_PEAK1_POS_SF6: u16 = 576;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH1_SF6_PEAK2_POS_SF6: u16 = 577;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12: u16 = 578;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12: u16 = 579;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH2_FINETIME_ON_LAST: u16 = 580;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH2_AUTO_SCALE: u16 = 581;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH2_DROP_ON_SYNCH: u16 = 582;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH2_GAIN: u16 = 583;
pub const SX1302_REG_RX_TOP_FRAME_SYNCH2_TIMEOUT_OPT: u16 = 584;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_0_GAIN_P_HDR_RED: u16 = 585;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_0_ROUNDING: u16 = 586;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_0_POS_LIMIT: u16 = 587;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_0_SUM_SIZE: u16 = 588;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_0_MODE: u16 = 589;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_AUTO: u16 = 590;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PAYLOAD: u16 = 591;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_1_GAIN_P_PREAMB: u16 = 592;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_AUTO: u16 = 593;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_PAYLOAD: u16 = 594;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_2_GAIN_I_PREAMB: u16 = 595;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_3_FINESYNCH_SUM: u16 = 596;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_3_FINESYNCH_GAIN: u16 = 597;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF8: u16 = 598;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF7: u16 = 599;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF6: u16 = 600;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF5: u16 = 601;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF12: u16 = 602;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF11: u16 = 603;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF10: u16 = 604;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF9: u16 = 605;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF12: u16 = 606;
pub const SX1302_REG_RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF5_6: u16 = 607;
pub const SX1302_REG_RX_TOP_FINE_TIMING_7_GAIN_I_AUTO_MAX: u16 = 608;
pub const SX1302_REG_RX_TOP_FINE_TIMING_7_GAIN_P_AUTO_MAX: u16 = 609;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_0_GAIN_P_HDR_RED: u16 = 610;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_0_ROUNDING: u16 = 611;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_0_POS_LIMIT: u16 = 612;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_0_SUM_SIZE: u16 = 613;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_0_MODE: u16 = 614;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_AUTO: u16 = 615;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PAYLOAD: u16 = 616;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_1_GAIN_P_PREAMB: u16 = 617;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_AUTO: u16 = 618;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PAYLOAD: u16 = 619;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_2_GAIN_I_PREAMB: u16 = 620;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_3_FINESYNCH_SUM: u16 = 621;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_3_FINESYNCH_GAIN: u16 = 622;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF8: u16 = 623;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF7: u16 = 624;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF6: u16 = 625;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF5: u16 = 626;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF12: u16 = 627;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF11: u16 = 628;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF10: u16 = 629;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF9: u16 = 630;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF12: u16 = 631;
pub const SX1302_REG_RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF5_6: u16 = 632;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT: u16 = 633;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT: u16 = 634;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP: u16 = 635;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA: u16 = 636;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA: u16 = 637;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR: u16 = 638;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB: u16 = 639;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET: u16 = 640;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT: u16 = 641;
pub const SX1302_REG_RX_TOP_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG: u16 = 642;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF8: u16 = 643;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF7: u16 = 644;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF6: u16 = 645;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF5: u16 = 646;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF12: u16 = 647;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF11: u16 = 648;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF10: u16 = 649;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF9: u16 = 650;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF8: u16 = 651;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF7: u16 = 652;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF6: u16 = 653;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF5: u16 = 654;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF12: u16 = 655;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF11: u16 = 656;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF10: u16 = 657;
pub const SX1302_REG_RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF9: u16 = 658;
pub const SX1302_REG_RX_TOP_FREQ_TRACK2_FREQ_TRACK_FINE: u16 = 659;
pub const SX1302_REG_RX_TOP_FREQ_TRACK2_FREQ_TRACK_HDR_SKIP: u16 = 660;
pub const SX1302_REG_RX_TOP_FREQ_TRACK3_FREQ_SYNCH_GAIN: u16 = 661;
pub const SX1302_REG_RX_TOP_FREQ_TRACK3_FREQ_TRACK_AUTO_THR: u16 = 662;
pub const SX1302_REG_RX_TOP_FREQ_TRACK4_SNR_MIN_WINDOW: u16 = 663;
pub const SX1302_REG_RX_TOP_FREQ_TRACK4_GAIN_AUTO_SNR_MIN: u16 = 664;
pub const SX1302_REG_RX_TOP_FREQ_TRACK4_FREQ_SYNCH_THR: u16 = 665;
pub const SX1302_REG_RX_TOP_DETECT_MSP0_MSP_PNR: u16 = 666;
pub const SX1302_REG_RX_TOP_DETECT_MSP1_MSP2_PNR: u16 = 667;
pub const SX1302_REG_RX_TOP_DETECT_MSP2_MSP2_PEAK_NB: u16 = 668;
pub const SX1302_REG_RX_TOP_DETECT_MSP2_MSP_PEAK_NB: u16 = 669;
pub const SX1302_REG_RX_TOP_DETECT_MSP3_ACC_MIN2: u16 = 670;
pub const SX1302_REG_RX_TOP_DETECT_MSP3_ACC_WIN_LEN: u16 = 671;
pub const SX1302_REG_RX_TOP_DETECT_MSP3_MSP_POS_SEL: u16 = 672;
pub const SX1302_REG_RX_TOP_DETECT_MSP3_MSP_CNT_MODE: u16 = 673;
pub const SX1302_REG_RX_TOP_DETECT_ACC1_USE_GAIN_SYMB: u16 = 674;
pub const SX1302_REG_RX_TOP_DETECT_ACC1_ACC_PNR: u16 = 675;
pub const SX1302_REG_RX_TOP_DETECT_ACC2_NOISE_COEFF: u16 = 676;
pub const SX1302_REG_RX_TOP_DETECT_ACC2_ACC_COEFF: u16 = 677;
pub const SX1302_REG_RX_TOP_DETECT_ACC2_ACC_2_SAME_PEAKS: u16 = 678;
pub const SX1302_REG_RX_TOP_DETECT_ACC2_ACC_AUTO_RESCALE: u16 = 679;
pub const SX1302_REG_RX_TOP_DETECT_ACC2_ACC_PEAK_POS_SEL: u16 = 680;
pub const SX1302_REG_RX_TOP_DETECT_ACC2_ACC_PEAK_SUM_EN: u16 = 681;
pub const SX1302_REG_RX_TOP_DETECT_ACC3_MIN_SINGLE_PEAK: u16 = 682;
pub const SX1302_REG_RX_TOP_TIMESTAMP_SEL_SNR_MIN: u16 = 683;
pub const SX1302_REG_RX_TOP_TIMESTAMP_ENABLE: u16 = 684;
pub const SX1302_REG_RX_TOP_TIMESTAMP_NB_SYMB: u16 = 685;
pub const SX1302_REG_RX_TOP_MODEM_BUSY_MSB_RX_MODEM_BUSY: u16 = 686;
pub const SX1302_REG_RX_TOP_MODEM_BUSY_LSB_RX_MODEM_BUSY: u16 = 687;
pub const SX1302_REG_RX_TOP_MODEM_STATE_RX_MODEM_STS_SPARE: u16 = 688;
pub const SX1302_REG_RX_TOP_MODEM_STATE_RX_MODEM_STATE: u16 = 689;
pub const SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_H: u16 = 690;
pub const SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_L: u16 = 691;
pub const SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_SIGN: u16 = 692;
pub const SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_MSB_MODEM_SYNC_DELTA: u16 = 693;
pub const SX1302_REG_RX_TOP_MODEM_SYNC_DELTA_LSB_MODEM_SYNC_DELTA: u16 = 694;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF8: u16 = 695;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF7: u16 = 696;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF6: u16 = 697;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF5: u16 = 698;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF12: u16 = 699;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF11: u16 = 700;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF10: u16 = 701;
pub const SX1302_REG_RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF9: u16 = 702;
pub const SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_3_CLK_OVERRIDE: u16 = 703;
pub const SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_2_CLK_OVERRIDE: u16 = 704;
pub const SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_1_CLK_OVERRIDE: u16 = 705;
pub const SX1302_REG_RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE: u16 = 706;
pub const SX1302_REG_RX_TOP_DUMMY2_DUMMY2: u16 = 707;
pub const SX1302_REG_RX_TOP_RX_BUFFER_DEBUG_MODE: u16 = 708;
pub const SX1302_REG_RX_TOP_RX_BUFFER_DIRECT_RAM_IF: u16 = 709;
pub const SX1302_REG_RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP: u16 = 710;
pub const SX1302_REG_RX_TOP_RX_BUFFER_STORE_HEADER_ERR_META: u16 = 711;
pub const SX1302_REG_RX_TOP_RX_BUFFER_STORE_SYNC_FAIL_META: u16 = 712;
pub const SX1302_REG_RX_TOP_RXBUFFER_TIMESTAMP_CFG_MAX_TS_METRICS: u16 = 713;
pub const SX1302_REG_RX_TOP_RX_BUFFER_IRQ_CTRL_MSB_RX_BUFFER_IRQ_THRESHOLD: u16 = 714;
pub const SX1302_REG_RX_TOP_RX_BUFFER_IRQ_CTRL_LSB_RX_BUFFER_IRQ_THRESHOLD: u16 = 715;
pub const SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_MSB_LAST_ADDR_READ: u16 = 716;
pub const SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_READ_LSB_LAST_ADDR_READ: u16 = 717;
pub const SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_MSB_LAST_ADDR_WRITE: u16 = 718;
pub const SX1302_REG_RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_LSB_LAST_ADDR_WRITE: u16 = 719;
pub const SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES: u16 = 720;
pub const SX1302_REG_RX_TOP_RX_BUFFER_NB_BYTES_LSB_RX_BUFFER_NB_BYTES: u16 = 721;
pub const SX1302_REG_RX_TOP_MULTI_SF_SYNC_ERR_PKT_CNT_MULTI_SF_SYNC_ERR_PKTS: u16 = 722;
pub const SX1302_REG_RX_TOP_MULTI_SF_PLD_ERR_PKT_CNT_MULTI_SF_PLD_ERR_PKTS: u16 = 723;
pub const SX1302_REG_RX_TOP_MULTI_SF_GOOD_PKT_CNT_MULTI_SF_GOOD_PKTS: u16 = 724;
pub const SX1302_REG_RX_TOP_SERV_MODEM_SYNC_ERR_PKT_CNT_SERV_MODEM_SYNC_ERR_PKTS: u16 = 725;
pub const SX1302_REG_RX_TOP_SERV_MODEM_PLD_ERR_PKT_CNT_SERV_MODEM_PLD_ERR_PKTS: u16 = 726;
pub const SX1302_REG_RX_TOP_SERV_MODEM_GOOD_PKT_CNT_SERV_MODEM_GOOD_PKTS: u16 = 727;
pub const SX1302_REG_RX_TOP_GFSK_MODEM_SYNC_ERR_PKT_CNT_GFSK_MODEM_SYNC_ERR_PKTS: u16 = 728;
pub const SX1302_REG_RX_TOP_GFSK_MODEM_PLD_ERR_PKT_CNT_GFSK_MODEM_PLD_ERR_PKTS: u16 = 729;
pub const SX1302_REG_RX_TOP_GFSK_MODEM_GOOD_PKT_CNT_GFSK_MODEM_GOOD_PKTS: u16 = 730;
pub const SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_0_BAD_MODEM_ID_WRITE: u16 = 731;
pub const SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_1_BAD_MODEM_ID_WRITE: u16 = 732;
pub const SX1302_REG_RX_TOP_BAD_MODEM_ID_WRITE_2_BAD_MODEM_ID_WRITE: u16 = 733;
pub const SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_0_BAD_MODEM_ID_READ: u16 = 734;
pub const SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_1_BAD_MODEM_ID_READ: u16 = 735;
pub const SX1302_REG_RX_TOP_BAD_MODEM_ID_READ_2_BAD_MODEM_ID_READ: u16 = 736;
pub const SX1302_REG_RX_TOP_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE: u16 = 737;
pub const SX1302_REG_RX_TOP_SAMPLE_4_MSPS_LATCHED_125K_SAMPLE_4_MSPS_LATCHED_125K: u16 = 738;
pub const SX1302_REG_RX_TOP_DUMMY3_DUMMY3: u16 = 739;
pub const SX1302_REG_ARB_MCU_CTRL_CLK_EN: u16 = 740;
pub const SX1302_REG_ARB_MCU_CTRL_RADIO_RST: u16 = 741;
pub const SX1302_REG_ARB_MCU_CTRL_FORCE_HOST_FE_CTRL: u16 = 742;
pub const SX1302_REG_ARB_MCU_CTRL_MCU_CLEAR: u16 = 743;
pub const SX1302_REG_ARB_MCU_CTRL_HOST_PROG: u16 = 744;
pub const SX1302_REG_ARB_MCU_CTRL_PARITY_ERROR: u16 = 745;
pub const SX1302_REG_ARB_MCU_MCU_ARB_STATUS_MCU_ARB_STATUS: u16 = 746;
pub const SX1302_REG_ARB_MCU_UART_CFG_MSBF: u16 = 747;
pub const SX1302_REG_ARB_MCU_UART_CFG_PAR_EN: u16 = 748;
pub const SX1302_REG_ARB_MCU_UART_CFG_PAR_MODE: u16 = 749;
pub const SX1302_REG_ARB_MCU_UART_CFG_START_LEN: u16 = 750;
pub const SX1302_REG_ARB_MCU_UART_CFG_STOP_LEN: u16 = 751;
pub const SX1302_REG_ARB_MCU_UART_CFG_WORD_LEN: u16 = 752;
pub const SX1302_REG_ARB_MCU_UART_CFG2_BIT_RATE: u16 = 753;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0: u16 = 754;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_1_ARB_DEBUG_CFG_1: u16 = 755;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_2_ARB_DEBUG_CFG_2: u16 = 756;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_CFG_3_ARB_DEBUG_CFG_3: u16 = 757;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0: u16 = 758;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_1_ARB_DEBUG_STS_1: u16 = 759;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_2_ARB_DEBUG_STS_2: u16 = 760;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_3_ARB_DEBUG_STS_3: u16 = 761;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_4_ARB_DEBUG_STS_4: u16 = 762;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_5_ARB_DEBUG_STS_5: u16 = 763;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_6_ARB_DEBUG_STS_6: u16 = 764;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_7_ARB_DEBUG_STS_7: u16 = 765;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_8_ARB_DEBUG_STS_8: u16 = 766;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_9_ARB_DEBUG_STS_9: u16 = 767;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_10_ARB_DEBUG_STS_10: u16 = 768;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_11_ARB_DEBUG_STS_11: u16 = 769;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_12_ARB_DEBUG_STS_12: u16 = 770;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_13_ARB_DEBUG_STS_13: u16 = 771;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_14_ARB_DEBUG_STS_14: u16 = 772;
pub const SX1302_REG_ARB_MCU_ARB_DEBUG_STS_15_ARB_DEBUG_STS_15: u16 = 773;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_1_OFFSET: u16 = 774;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_0_OFFSET: u16 = 775;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_3_OFFSET: u16 = 776;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_2_OFFSET: u16 = 777;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_5_OFFSET: u16 = 778;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_4_OFFSET: u16 = 779;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_7_OFFSET: u16 = 780;
pub const SX1302_REG_ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_6_OFFSET: u16 = 781;
pub const SX1302_REG_ARB_MCU_DUMMY_DUMMY3: u16 = 782;
pub const SX1302_REG_RADIO_FE_GLBL_CTRL_DECIM_B_CLR: u16 = 783;
pub const SX1302_REG_RADIO_FE_GLBL_CTRL_DECIM_A_CLR: u16 = 784;
pub const SX1302_REG_RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN: u16 = 785;
pub const SX1302_REG_RADIO_FE_CTRL0_RADIO_A_FORCE_HOST_FILTER_GAIN: u16 = 786;
pub const SX1302_REG_RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN: u16 = 787;
pub const SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_A_RSSI_DB_DEFAULT_VALUE: u16 = 788;
pub const SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_A_RSSI_DEC_DEFAULT_VALUE: u16 = 789;
pub const SX1302_REG_RADIO_FE_RSSI_DEC_RD_RADIO_A_RSSI_DEC_OUT: u16 = 790;
pub const SX1302_REG_RADIO_FE_RSSI_BB_RD_RADIO_A_RSSI_BB_OUT: u16 = 791;
pub const SX1302_REG_RADIO_FE_DEC_FILTER_RD_RADIO_A_DEC_FILTER_GAIN: u16 = 792;
pub const SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_A_RSSI_BB_FILTER_ALPHA: u16 = 793;
pub const SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_A_RSSI_DEC_FILTER_ALPHA: u16 = 794;
pub const SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF: u16 = 795;
pub const SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF: u16 = 796;
pub const SX1302_REG_RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_A_DIO_TEST_MODE: u16 = 797;
pub const SX1302_REG_RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_A_DIO_TEST_DIR: u16 = 798;
pub const SX1302_REG_RADIO_FE_RADIO_DIO_DIR_RADIO_A_DIO_DIR: u16 = 799;
pub const SX1302_REG_RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN: u16 = 800;
pub const SX1302_REG_RADIO_FE_CTRL0_RADIO_B_FORCE_HOST_FILTER_GAIN: u16 = 801;
pub const SX1302_REG_RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN: u16 = 802;
pub const SX1302_REG_RADIO_FE_RSSI_DB_DEF_RADIO_B_RSSI_DB_DEFAULT_VALUE: u16 = 803;
pub const SX1302_REG_RADIO_FE_RSSI_DEC_DEF_RADIO_B_RSSI_DEC_DEFAULT_VALUE: u16 = 804;
pub const SX1302_REG_RADIO_FE_RSSI_DEC_RD_RADIO_B_RSSI_DEC_OUT: u16 = 805;
pub const SX1302_REG_RADIO_FE_RSSI_BB_RD_RADIO_B_RSSI_BB_OUT: u16 = 806;
pub const SX1302_REG_RADIO_FE_DEC_FILTER_RD_RADIO_B_DEC_FILTER_GAIN: u16 = 807;
pub const SX1302_REG_RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_B_RSSI_BB_FILTER_ALPHA: u16 = 808;
pub const SX1302_REG_RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_B_RSSI_DEC_FILTER_ALPHA: u16 = 809;
pub const SX1302_REG_RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF: u16 = 810;
pub const SX1302_REG_RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF: u16 = 811;
pub const SX1302_REG_RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_B_DIO_TEST_MODE: u16 = 812;
pub const SX1302_REG_RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_B_DIO_TEST_DIR: u16 = 813;
pub const SX1302_REG_RADIO_FE_RADIO_DIO_DIR_RADIO_B_DIO_DIR: u16 = 814;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_VALID: u16 = 815;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_BUSY: u16 = 816;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_DURATION: u16 = 817;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL: u16 = 818;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_START: u16 = 819;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_RADIO_SEL: u16 = 820;
pub const SX1302_REG_RADIO_FE_SIG_ANA_CFG_EN: u16 = 821;
pub const SX1302_REG_RADIO_FE_SIG_ANA_FREQ_FREQ: u16 = 822;
pub const SX1302_REG_RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT: u16 = 823;
pub const SX1302_REG_RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT: u16 = 824;
pub const SX1302_REG_RADIO_FE_DUMMY_DUMMY: u16 = 825;
pub const SX1302_REG_OTP_BYTE_ADDR_ADDR: u16 = 826;
pub const SX1302_REG_OTP_RD_DATA_RD_DATA: u16 = 827;
pub const SX1302_REG_OTP_STATUS_CHECKSUM_STATUS: u16 = 828;
pub const SX1302_REG_OTP_STATUS_FSM_READY: u16 = 829;
pub const SX1302_REG_OTP_CFG_ACCESS_MODE: u16 = 830;
pub const SX1302_REG_OTP_BIT_POS_POS: u16 = 831;
pub const SX1302_REG_OTP_PIN_CTRL_0_TM: u16 = 832;
pub const SX1302_REG_OTP_PIN_CTRL_0_STROBE: u16 = 833;
pub const SX1302_REG_OTP_PIN_CTRL_0_PGENB: u16 = 834;
pub const SX1302_REG_OTP_PIN_CTRL_0_LOAD: u16 = 835;
pub const SX1302_REG_OTP_PIN_CTRL_0_CSB: u16 = 836;
pub const SX1302_REG_OTP_PIN_CTRL_1_FSCK: u16 = 837;
pub const SX1302_REG_OTP_PIN_CTRL_1_FSI: u16 = 838;
pub const SX1302_REG_OTP_PIN_CTRL_1_FRST: u16 = 839;
pub const SX1302_REG_OTP_PIN_STATUS_FSO: u16 = 840;
pub const SX1302_REG_OTP_MODEM_EN_0_MODEM_EN: u16 = 841;
pub const SX1302_REG_OTP_MODEM_EN_1_MODEM_EN: u16 = 842;
pub const SX1302_REG_OTP_MODEM_SF_EN_SF_EN: u16 = 843;
pub const SX1302_REG_OTP_TIMESTAMP_EN_TIMESTAMP_EN: u16 = 844;
pub const SX1302_REG_OTP_DUMMY_DUMMY: u16 = 845;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_MSB_IF_FREQ_0: u16 = 846;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_LSB_IF_FREQ_0: u16 = 847;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_RADIO_SEL_RADIO_SELECT: u16 = 848;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BW_START: u16 = 849;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_AUTO_BW_RED: u16 = 850;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_NO_FAST_START: u16 = 851;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BYPASS: u16 = 852;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_ENABLE: u16 = 853;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW_LOCKED: u16 = 854;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW: u16 = 855;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG3_BW_RED: u16 = 856;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG4_IIR_DCC_TIME: u16 = 857;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_0_FIR1_COEFF_0: u16 = 858;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_1_FIR1_COEFF_1: u16 = 859;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_2_FIR1_COEFF_2: u16 = 860;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_3_FIR1_COEFF_3: u16 = 861;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_4_FIR1_COEFF_4: u16 = 862;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_5_FIR1_COEFF_5: u16 = 863;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_6_FIR1_COEFF_6: u16 = 864;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_7_FIR1_COEFF_7: u16 = 865;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_0_FIR2_COEFF_0: u16 = 866;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_1_FIR2_COEFF_1: u16 = 867;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_2_FIR2_COEFF_2: u16 = 868;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_3_FIR2_COEFF_3: u16 = 869;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_4_FIR2_COEFF_4: u16 = 870;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_5_FIR2_COEFF_5: u16 = 871;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_6_FIR2_COEFF_6: u16 = 872;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_7_FIR2_COEFF_7: u16 = 873;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_SEL: u16 = 874;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_DB: u16 = 875;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_DC_COMP_EN: u16 = 876;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FORCE_DEFAULT_FIR: u16 = 877;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_RSSI_EARLY_LATCH: u16 = 878;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FREEZE_ON_SYNC: u16 = 879;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_IN_COMP: u16 = 880;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_FIR_HYST: u16 = 881;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MAX_SAMPLE: u16 = 882;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MIN_SAMPLE: u16 = 883;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_DAGC_FIR_FAST: u16 = 884;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_FORCE_GAIN_FIR: u16 = 885;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR1: u16 = 886;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR2: u16 = 887;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_TARGET_LVL: u16 = 888;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_INCR_STEP: u16 = 889;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_DROP_COMP: u16 = 890;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_COMB_FILTER_EN: u16 = 891;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_NO_FREEZE_START: u16 = 892;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_FREEZE_ON_SYNC: u16 = 893;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT0_SAMPLE: u16 = 894;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT1_THR_M6: u16 = 895;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT2_THR_M12: u16 = 896;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT3_THR_M18: u16 = 897;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_GAIN: u16 = 898;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_FORCE_GAIN: u16 = 899;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_BW: u16 = 900;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_SF: u16 = 901;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET_HDR_CTRL: u16 = 902;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET: u16 = 903;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_MODEM_EN: u16 = 904;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_CODING_RATE: u16 = 905;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN: u16 = 906;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_MODEM_START: u16 = 907;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CADRXTX: u16 = 908;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_IMPLICIT_HEADER: u16 = 909;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CRC_EN: u16 = 910;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG3_PAYLOAD_LENGTH: u16 = 911;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE_EN: u16 = 912;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE: u16 = 913;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_HEADER_DIFF_MODE: u16 = 914;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_ZERO_PAD: u16 = 915;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG6_PREAMBLE_SYMB_NB: u16 = 916;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG7_PREAMBLE_SYMB_NB: u16 = 917;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_INT_DELAY: u16 = 918;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_RX: u16 = 919;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_TX: u16 = 920;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_POST_PREAMBLE_GAP_LONG: u16 = 921;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_DFT_PEAK_EN: u16 = 922;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CHIRP_INVERT: u16 = 923;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_SWAP_IQ: u16 = 924;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CONTINUOUS: u16 = 925;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG1_DETECT_TIMEOUT: u16 = 926;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_RANGE: u16 = 927;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_DELAY: u16 = 928;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_RESTART_ON_HDR_ERR: u16 = 929;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_CLK_EN_RESYNC_DIN: u16 = 930;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_RX_CFG3_LLR_SCALE: u16 = 931;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS: u16 = 932;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS: u16 = 933;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_FINETIME_ON_LAST: u16 = 934;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_AUTO_SCALE: u16 = 935;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_DROP_ON_SYNCH: u16 = 936;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_GAIN: u16 = 937;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_TIMEOUT_OPT: u16 = 938;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_GAIN_P_HDR_RED: u16 = 939;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_ROUNDING: u16 = 940;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_POS_LIMIT: u16 = 941;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_SUM_SIZE: u16 = 942;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_MODE: u16 = 943;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_AUTO: u16 = 944;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PAYLOAD: u16 = 945;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB: u16 = 946;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN: u16 = 947;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PAYLOAD: u16 = 948;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PREAMB: u16 = 949;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_SUM: u16 = 950;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_GAIN: u16 = 951;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_GAIN_I_AUTO: u16 = 952;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_I_AUTO_MAX: u16 = 953;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_P_AUTO_MAX: u16 = 954;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT: u16 = 955;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT: u16 = 956;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP: u16 = 957;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA: u16 = 958;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA: u16 = 959;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR: u16 = 960;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB: u16 = 961;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET: u16 = 962;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT: u16 = 963;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG: u16 = 964;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_FINE: u16 = 965;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_HDR_SKIP: u16 = 966;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_EN: u16 = 967;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_SYNCH_GAIN: u16 = 968;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_TRACK_AUTO_THR: u16 = 969;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_SNR_MIN_WINDOW: u16 = 970;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_GAIN_AUTO_SNR_MIN: u16 = 971;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_FREQ_SYNCH_THR: u16 = 972;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP0_MSP_PNR: u16 = 973;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP1_MSP2_PNR: u16 = 974;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP2_PEAK_NB: u16 = 975;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP_PEAK_NB: u16 = 976;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_MIN2: u16 = 977;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_WIN_LEN: u16 = 978;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_POS_SEL: u16 = 979;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_CNT_MODE: u16 = 980;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_USE_GAIN_SYMB: u16 = 981;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR: u16 = 982;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_NOISE_COEFF: u16 = 983;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_COEFF: u16 = 984;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_2_SAME_PEAKS: u16 = 985;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_AUTO_RESCALE: u16 = 986;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_POS_SEL: u16 = 987;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_SUM_EN: u16 = 988;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DETECT_ACC3_MIN_SINGLE_PEAK: u16 = 989;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_SEL_SNR_MIN: u16 = 990;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_ENABLE: u16 = 991;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_NB_SYMB: u16 = 992;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_TRANSPOSE_CLK_OVERRIDE: u16 = 993;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_MODEM_CLK_OVERRIDE: u16 = 994;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_TRANSPOSE_CLK_OVERRIDE: u16 = 995;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_MODEM_CLK_OVERRIDE: u16 = 996;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DUMMY0_DUMMY0: u16 = 997;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_MSB_IF_FREQ_0: u16 = 998;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_LSB_IF_FREQ_0: u16 = 999;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_IBM: u16 = 1000;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_DCFREE_ENC: u16 = 1001;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_EN: u16 = 1002;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_PKT_MODE: u16 = 1003;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_ADRS_COMP: u16 = 1004;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_PSIZE: u16 = 1005;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_CH_BW_EXPO: u16 = 1006;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_MODEM_INVERT_IQ: u16 = 1007;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_AUTO_AFC: u16 = 1008;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RADIO_SELECT: u16 = 1009;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RX_INVERT: u16 = 1010;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_RSSI_LENGTH: u16 = 1011;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_ERROR_OSR_TOL: u16 = 1012;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_NODE_ADRS_NODE_ADRS: u16 = 1013;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_BROADCAST_BROADCAST: u16 = 1014;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_PKT_LENGTH_PKT_LENGTH: u16 = 1015;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_MSB_TIMEOUT: u16 = 1016;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_LSB_TIMEOUT: u16 = 1017;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_MSB_BIT_RATE: u16 = 1018;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BIT_RATE_LSB_BIT_RATE: u16 = 1019;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN: u16 = 1020;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN: u16 = 1021;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN: u16 = 1022;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN: u16 = 1023;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN: u16 = 1024;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN: u16 = 1025;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN: u16 = 1026;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN: u16 = 1027;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_FSK_RSSI_FILTER_ALPHA_FSK_RSSI_FILTER_ALPHA: u16 = 1028;
pub const SX1302_REG_RX_TOP_LORA_SERVICE_FSK_DUMMY1_DUMMY1: u16 = 1029;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_ENABLE: u16 = 1030;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREWRAP: u16 = 1031;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTUREFORCETRIGGER: u16 = 1032;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART: u16 = 1033;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_CFG_RAMCONFIG: u16 = 1034;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_A_SOURCEMUX: u16 = 1035;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_SOURCE_B_SOURCEMUX: u16 = 1036;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_0_CAPTUREPERIOD: u16 = 1037;
pub const SX1302_REG_CAPTURE_RAM_CAPTURE_PERIOD_1_CAPTUREPERIOD: u16 = 1038;
pub const SX1302_REG_CAPTURE_RAM_STATUS_CAPCOMPLETE: u16 = 1039;
pub const SX1302_REG_CAPTURE_RAM_LAST_RAM_ADDR_0_LASTRAMADDR: u16 = 1040;
pub const SX1302_REG_CAPTURE_RAM_LAST_RAM_ADDR_1_LASTRAMADDR: u16 = 1041;
pub const SX1302_REG_CAPTURE_RAM_CLOCK_GATE_OVERRIDE_CLK_OVERRIDE: u16 = 1042;
pub const SX1302_REG_CAPTURE_RAM_DUMMY0_DUMMY0: u16 = 1043;

pub const LGW_TOTALREGS: u16 = 1044;

#[derive(Debug, Clone)]
pub struct LgwReg {
    pub     page: i8,      //*!< page containing the register (-1 for all pages) */
    pub     addr: u16,      //*!< base address of the register (15 bit) */
    pub     offs: u8,        //*!< position of the register LSB (between 0 to 7) */
    pub     sign: bool,        //*!< 1 indicates the register is signed (2 complem.) */
    pub     leng:u8,        //*!< number of bits in the register */
    pub     rdon: bool,        //*!< 1 indicates a read-only register */
    pub     chck: bool,       //*!< register can be checked or not: (pulse, w0clr, w1clr) */
    pub     dflt:i32        //*!< register default value */
}
impl fmt::Display for LgwReg {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "LgwReg {{ page: {}, addr: {:#06x}, offs: {}, sign: {}, leng: {}, rdon: {}, chck: {}, dflt: {} }}",
            self.page, self.addr, self.offs, self.sign, self.leng, self.rdon, self.chck, self.dflt
        )
    }
}

impl LgwReg {
    pub const fn new(page: i8, addr: u16, offs: u8, sign: u8, leng: u8, rdon: u8, chck: u8, dflt: i32) -> LgwReg {
        LgwReg {
            page,
            addr,
            offs,
            sign : sign != 0,
            leng,
            rdon: rdon != 0,
            chck: chck != 0,
            dflt
        }
    }
    
}

pub const LOREGS: [LgwReg; LGW_TOTALREGS as usize + 1] = [
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+0,0,0,2,0,1,0), // COMMON_PAGE_PAGE
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+1,4,0,1,0,1,0), // COMMON_CTRL0_CLK32_RIF_CTRL
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+1,3,0,1,0,1,1), // COMMON_CTRL0_HOST_RADIO_CTRL
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+1,2,0,1,0,1,0), // COMMON_CTRL0_RADIO_MISC_EN
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+1,1,0,1,0,1,1), // COMMON_CTRL0_SX1261_MODE_RADIO_B
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+1,0,0,1,0,1,1), // COMMON_CTRL0_SX1261_MODE_RADIO_A
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+2,3,0,1,0,1,0), // COMMON_CTRL1_SWAP_IQ_RADIO_B
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+2,2,0,1,0,1,1), // COMMON_CTRL1_SAMPLING_EDGE_RADIO_B
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+2,1,0,1,0,1,0), // COMMON_CTRL1_SWAP_IQ_RADIO_A
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+2,0,0,1,0,1,1), // COMMON_CTRL1_SAMPLING_EDGE_RADIO_A
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+3,0,0,8,0,1,2), // COMMON_SPI_DIV_RATIO_SPI_HALF_PERIOD
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+4,0,0,8,0,1,128), // COMMON_RADIO_SELECT_RADIO_SELECT
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+5,3,0,1,0,1,0), // COMMON_GEN_GLOBAL_EN
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+5,2,0,1,0,1,0), // COMMON_GEN_FSK_MODEM_ENABLE
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+5,1,0,1,0,1,0), // COMMON_GEN_CONCENTRATOR_MODEM_ENABLE
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+5,0,0,1,0,1,0), // COMMON_GEN_MBWSSF_MODEM_ENABLE
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+6,0,0,8,1,1,16), // COMMON_VERSION_VERSION
    LgwReg::new(0,SX1302_REG_COMMON_BASE_ADDR+7,0,0,1,1,1,0), // COMMON_DUMMY_DUMMY
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+0,4,0,1,0,1,1), // AGC_MCU_CTRL_CLK_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+0,3,0,1,0,1,0), // AGC_MCU_CTRL_FORCE_HOST_FE_CTRL
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+0,2,0,1,0,1,1), // AGC_MCU_CTRL_MCU_CLEAR
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+0,1,0,1,0,1,0), // AGC_MCU_CTRL_HOST_PROG
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+0,0,0,1,1,1,0), // AGC_MCU_CTRL_PARITY_ERROR
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+1,0,0,8,1,1,0), // AGC_MCU_MCU_AGC_STATUS_MCU_AGC_STATUS
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+2,2,0,2,0,1,0), // AGC_MCU_PA_GAIN_PA_B_GAIN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+2,0,0,2,0,1,0), // AGC_MCU_PA_GAIN_PA_A_GAIN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+3,3,0,1,0,1,0), // AGC_MCU_RF_EN_A_RADIO_RST
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+3,2,0,1,0,1,0), // AGC_MCU_RF_EN_A_RADIO_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+3,1,0,1,0,1,0), // AGC_MCU_RF_EN_A_PA_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+3,0,0,1,0,1,0), // AGC_MCU_RF_EN_A_LNA_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+4,3,0,1,0,1,0), // AGC_MCU_RF_EN_B_RADIO_RST
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+4,2,0,1,0,1,0), // AGC_MCU_RF_EN_B_RADIO_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+4,1,0,1,0,1,0), // AGC_MCU_RF_EN_B_PA_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+4,0,0,1,0,1,0), // AGC_MCU_RF_EN_B_LNA_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+5,4,0,4,0,1,0), // AGC_MCU_LUT_TABLE_A_PA_LUT
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+5,0,0,4,0,1,0), // AGC_MCU_LUT_TABLE_A_LNA_LUT
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+6,4,0,4,0,1,0), // AGC_MCU_LUT_TABLE_B_PA_LUT
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+6,0,0,4,0,1,0), // AGC_MCU_LUT_TABLE_B_LNA_LUT
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+7,5,0,1,0,1,0), // AGC_MCU_UART_CFG_MSBF
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+7,4,0,1,0,1,0), // AGC_MCU_UART_CFG_PAR_EN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+7,3,0,1,0,1,0), // AGC_MCU_UART_CFG_PAR_MODE
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+7,2,0,1,0,1,0), // AGC_MCU_UART_CFG_START_LEN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+7,1,0,1,0,1,0), // AGC_MCU_UART_CFG_STOP_LEN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+7,0,0,1,0,1,1), // AGC_MCU_UART_CFG_WORD_LEN
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+8,0,0,8,0,1,0), // AGC_MCU_UART_CFG2_BIT_RATE
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+9,0,0,8,0,1,0), // AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE3_MCU_MAIL_BOX_WR_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+10,0,0,8,0,1,0), // AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE2_MCU_MAIL_BOX_WR_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+11,0,0,8,0,1,0), // AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE1_MCU_MAIL_BOX_WR_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+12,0,0,8,0,1,0), // AGC_MCU_MCU_MAIL_BOX_WR_DATA_BYTE0_MCU_MAIL_BOX_WR_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+13,0,0,8,1,1,0), // AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE3_MCU_MAIL_BOX_RD_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+14,0,0,8,1,1,0), // AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE2_MCU_MAIL_BOX_RD_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+15,0,0,8,1,1,0), // AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE1_MCU_MAIL_BOX_RD_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+16,0,0,8,1,1,0), // AGC_MCU_MCU_MAIL_BOX_RD_DATA_BYTE0_MCU_MAIL_BOX_RD_DATA
    LgwReg::new(0,SX1302_REG_AGC_MCU_BASE_ADDR+17,0,0,1,1,1,0), // AGC_MCU_DUMMY_DUMMY3
    LgwReg::new(0,SX1302_REG_CLK_CTRL_BASE_ADDR+0,2,0,1,0,1,0), // CLK_CTRL_CLK_SEL_CLKDIV_EN
    LgwReg::new(0,SX1302_REG_CLK_CTRL_BASE_ADDR+0,1,0,1,0,1,0), // CLK_CTRL_CLK_SEL_CLK_RADIO_B_SEL
    LgwReg::new(0,SX1302_REG_CLK_CTRL_BASE_ADDR+0,0,0,1,0,1,0), // CLK_CTRL_CLK_SEL_CLK_RADIO_A_SEL
    LgwReg::new(0,SX1302_REG_CLK_CTRL_BASE_ADDR+1,3,0,1,1,1,0), // CLK_CTRL_DUMMY_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+0,3,0,1,0,0,0), // TX_TOP_A_TX_TRIG_TX_FSM_CLR
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+0,2,0,1,0,1,0), // TX_TOP_A_TX_TRIG_TX_TRIG_GPS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+0,1,0,1,0,1,0), // TX_TOP_A_TX_TRIG_TX_TRIG_DELAYED
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+0,0,0,1,0,1,0), // TX_TOP_A_TX_TRIG_TX_TRIG_IMMEDIATE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+1,0,0,8,0,1,0), // TX_TOP_A_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+2,0,0,8,0,1,0), // TX_TOP_A_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+3,0,0,8,0,1,0), // TX_TOP_A_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+4,0,0,8,0,1,0), // TX_TOP_A_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+5,0,0,8,0,1,187), // TX_TOP_A_TX_START_DELAY_MSB_TX_START_DELAY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+6,0,0,8,0,1,128), // TX_TOP_A_TX_START_DELAY_LSB_TX_START_DELAY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+7,0,0,1,0,1,0), // TX_TOP_A_TX_CTRL_WRITE_BUFFER
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+8,0,0,3,0,1,1), // TX_TOP_A_TX_RAMP_DURATION_TX_RAMP_DURATION
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+9,0,0,1,0,1,0), // TX_TOP_A_GEN_CFG_0_MODULATION_TYPE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+10,1,0,1,0,1,0), // TX_TOP_A_TEST_0_TX_ACTIVE_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+10,0,0,1,0,1,0), // TX_TOP_A_TEST_0_TX_ACTIVE_SEL
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+11,1,0,1,0,0,0), // TX_TOP_A_TX_FLAG_TX_TIMEOUT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+11,0,0,1,0,0,0), // TX_TOP_A_TX_FLAG_PKT_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+12,0,0,8,0,1,0), // TX_TOP_A_AGC_TX_BW_AGC_TX_BW
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+13,0,0,8,0,1,0), // TX_TOP_A_AGC_TX_PWR_AGC_TX_PWR
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+14,0,0,8,0,1,0), // TX_TOP_A_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+15,0,0,8,0,1,0), // TX_TOP_A_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+16,0,0,8,0,1,0), // TX_TOP_A_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+17,0,0,8,1,1,0), // TX_TOP_A_TX_FSM_STATUS_TX_STATUS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+18,3,0,1,1,1,0), // TX_TOP_A_DUMMY_CONTROL_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+32,5,0,3,0,1,0), // TX_TOP_A_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+32,4,0,1,0,1,1), // TX_TOP_A_TX_RFFE_IF_CTRL_TX_CLK_EDGE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+32,3,0,1,0,1,1), // TX_TOP_A_TX_RFFE_IF_CTRL_TX_MODE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+32,2,0,1,0,1,0), // TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_DST
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+32,0,0,2,0,1,0), // TX_TOP_A_TX_RFFE_IF_CTRL_TX_IF_SRC
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+33,1,0,1,0,1,0), // TX_TOP_A_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+33,0,0,1,0,1,0), // TX_TOP_A_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+34,0,0,2,0,1,0), // TX_TOP_A_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+35,0,0,8,0,1,0), // TX_TOP_A_TX_RFFE_IF_I_OFFSET_I_OFFSET
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+36,0,0,8,0,1,0), // TX_TOP_A_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+37,0,0,8,0,1,108), // TX_TOP_A_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+38,0,0,8,0,1,144), // TX_TOP_A_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+39,0,0,8,0,1,0), // TX_TOP_A_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+40,0,0,4,0,1,0), // TX_TOP_A_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+41,0,0,8,0,1,0), // TX_TOP_A_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+42,0,0,8,0,1,64), // TX_TOP_A_TX_RFFE_IF_TEST_MOD_FREQ
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+43,3,0,1,1,1,0), // TX_TOP_A_DUMMY_MODULATOR_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+64,0,0,8,0,1,15), // TX_TOP_A_FSK_PKT_LEN_PKT_LENGTH
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+65,5,0,1,0,1,0), // TX_TOP_A_FSK_CFG_0_TX_CONT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+65,4,0,1,0,1,0), // TX_TOP_A_FSK_CFG_0_CRC_IBM
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+65,2,0,2,0,1,0), // TX_TOP_A_FSK_CFG_0_DCFREE_ENC
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+65,1,0,1,0,1,1), // TX_TOP_A_FSK_CFG_0_CRC_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+65,0,0,1,0,1,0), // TX_TOP_A_FSK_CFG_0_PKT_MODE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+66,0,0,8,0,1,0), // TX_TOP_A_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+67,0,0,8,0,1,20), // TX_TOP_A_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+68,0,0,8,0,1,26), // TX_TOP_A_FSK_BIT_RATE_MSB_BIT_RATE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+69,0,0,8,0,1,11), // TX_TOP_A_FSK_BIT_RATE_LSB_BIT_RATE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+70,5,0,3,0,1,3), // TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_SIZE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+70,4,0,1,0,1,0), // TX_TOP_A_FSK_MOD_FSK_PREAMBLE_SEQ
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+70,3,0,1,0,1,1), // TX_TOP_A_FSK_MOD_FSK_REF_PATTERN_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+70,1,0,2,0,1,0), // TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+70,0,0,1,0,1,0), // TX_TOP_A_FSK_MOD_FSK_GAUSSIAN_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+71,0,0,8,0,1,151), // TX_TOP_A_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+72,0,0,8,0,1,35), // TX_TOP_A_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+73,0,0,8,0,1,82), // TX_TOP_A_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+74,0,0,8,0,1,37), // TX_TOP_A_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+75,0,0,8,0,1,86), // TX_TOP_A_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+76,0,0,8,0,1,83), // TX_TOP_A_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+77,0,0,8,0,1,101), // TX_TOP_A_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+78,0,0,8,0,1,100), // TX_TOP_A_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+79,3,0,1,1,1,0), // TX_TOP_A_DUMMY_GSFK_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+96,4,0,4,0,1,5), // TX_TOP_A_TXRX_CFG0_0_MODEM_BW
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+96,0,0,4,0,1,7), // TX_TOP_A_TXRX_CFG0_0_MODEM_SF
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+97,6,0,2,0,1,2), // TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+97,4,0,2,0,1,0), // TX_TOP_A_TXRX_CFG0_1_PPM_OFFSET
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+97,3,0,1,0,1,0), // TX_TOP_A_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+97,0,0,3,0,1,2), // TX_TOP_A_TXRX_CFG0_1_CODING_RATE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+98,7,0,1,0,1,0), // TX_TOP_A_TXRX_CFG0_2_FINE_SYNCH_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+98,6,0,1,0,1,0), // TX_TOP_A_TXRX_CFG0_2_MODEM_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+98,4,0,2,0,1,2), // TX_TOP_A_TXRX_CFG0_2_CADRXTX
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+98,1,0,1,0,1,0), // TX_TOP_A_TXRX_CFG0_2_IMPLICIT_HEADER
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+98,0,0,1,0,1,1), // TX_TOP_A_TXRX_CFG0_2_CRC_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+99,0,0,8,0,1,12), // TX_TOP_A_TXRX_CFG0_3_PAYLOAD_LENGTH
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+100,7,0,1,0,1,0), // TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+100,0,0,6,0,1,0), // TX_TOP_A_TXRX_CFG1_0_INT_STEP_ORIDE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+101,7,0,1,0,1,0), // TX_TOP_A_TXRX_CFG1_1_MODEM_START
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+101,6,0,1,0,1,0), // TX_TOP_A_TXRX_CFG1_1_HEADER_DIFF_MODE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+101,0,0,6,0,1,0), // TX_TOP_A_TXRX_CFG1_1_ZERO_PAD
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+102,0,0,8,0,1,8), // TX_TOP_A_TXRX_CFG1_2_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+103,0,0,8,0,1,0), // TX_TOP_A_TXRX_CFG1_3_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+104,6,0,1,0,1,1), // TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+104,5,0,1,0,1,0), // TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_RX
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+104,4,0,1,0,1,0), // TX_TOP_A_TXRX_CFG1_4_AUTO_ACK_TX
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+105,4,0,3,0,1,0), // TX_TOP_A_TX_CFG0_0_CHIRP_LOWPASS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+105,3,0,1,0,1,0), // TX_TOP_A_TX_CFG0_0_PPM_OFFSET_SIG
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+105,2,0,1,0,1,1), // TX_TOP_A_TX_CFG0_0_CONTCHIRP
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+105,1,0,1,0,1,1), // TX_TOP_A_TX_CFG0_0_CHIRP_INVERT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+105,0,0,1,0,1,0), // TX_TOP_A_TX_CFG0_0_CONTINUOUS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+106,0,0,6,0,1,20), // TX_TOP_A_TX_CFG0_1_POWER_RANGING
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+107,0,0,8,0,1,0), // TX_TOP_A_TX_CFG1_0_FRAME_NB
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+108,5,0,2,0,1,0), // TX_TOP_A_TX_CFG1_1_HOP_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+108,0,0,5,0,1,10), // TX_TOP_A_TX_CFG1_1_IFS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+109,7,0,1,0,1,1), // TX_TOP_A_FRAME_SYNCH_0_AUTO_SCALE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+109,6,0,1,0,1,0), // TX_TOP_A_FRAME_SYNCH_0_DROP_ON_SYNCH
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+109,5,0,1,0,1,1), // TX_TOP_A_FRAME_SYNCH_0_GAIN
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+109,0,1,5,0,1,2), // TX_TOP_A_FRAME_SYNCH_0_PEAK1_POS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+110,7,0,1,0,1,0), // TX_TOP_A_FRAME_SYNCH_1_FINETIME_ON_LAST
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+110,5,0,2,0,1,3), // TX_TOP_A_FRAME_SYNCH_1_TIMEOUT_OPT
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+110,0,1,5,0,1,4), // TX_TOP_A_FRAME_SYNCH_1_PEAK2_POS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+111,0,0,4,1,1,0), // TX_TOP_A_LORA_TX_STATE_STATUS
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+112,2,0,1,0,0,0), // TX_TOP_A_LORA_TX_FLAG_FRAME_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+112,1,0,1,0,0,0), // TX_TOP_A_LORA_TX_FLAG_CONT_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+112,0,0,1,0,0,0), // TX_TOP_A_LORA_TX_FLAG_PLD_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_A_BASE_ADDR+113,3,0,1,1,1,0), // TX_TOP_A_DUMMY_LORA_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+0,3,0,1,0,0,0), // TX_TOP_B_TX_TRIG_TX_FSM_CLR
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+0,2,0,1,0,1,0), // TX_TOP_B_TX_TRIG_TX_TRIG_GPS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+0,1,0,1,0,1,0), // TX_TOP_B_TX_TRIG_TX_TRIG_DELAYED
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+0,0,0,1,0,1,0), // TX_TOP_B_TX_TRIG_TX_TRIG_IMMEDIATE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+1,0,0,8,0,1,0), // TX_TOP_B_TIMER_TRIG_BYTE3_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+2,0,0,8,0,1,0), // TX_TOP_B_TIMER_TRIG_BYTE2_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+3,0,0,8,0,1,0), // TX_TOP_B_TIMER_TRIG_BYTE1_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+4,0,0,8,0,1,0), // TX_TOP_B_TIMER_TRIG_BYTE0_TIMER_DELAYED_TRIG
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+5,0,0,8,0,1,187), // TX_TOP_B_TX_START_DELAY_MSB_TX_START_DELAY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+6,0,0,8,0,1,128), // TX_TOP_B_TX_START_DELAY_LSB_TX_START_DELAY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+7,0,0,1,0,1,0), // TX_TOP_B_TX_CTRL_WRITE_BUFFER
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+8,0,0,3,0,1,1), // TX_TOP_B_TX_RAMP_DURATION_TX_RAMP_DURATION
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+9,0,0,1,0,1,0), // TX_TOP_B_GEN_CFG_0_MODULATION_TYPE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+10,1,0,1,0,1,0), // TX_TOP_B_TEST_0_TX_ACTIVE_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+10,0,0,1,0,1,0), // TX_TOP_B_TEST_0_TX_ACTIVE_SEL
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+11,1,0,1,0,0,0), // TX_TOP_B_TX_FLAG_TX_TIMEOUT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+11,0,0,1,0,0,0), // TX_TOP_B_TX_FLAG_PKT_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+12,0,0,8,0,1,0), // TX_TOP_B_AGC_TX_BW_AGC_TX_BW
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+13,0,0,8,0,1,0), // TX_TOP_B_AGC_TX_PWR_AGC_TX_PWR
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+14,0,0,8,0,1,0), // TX_TOP_B_TIMEOUT_CNT_BYTE_2_TIMEOUT_CNT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+15,0,0,8,0,1,0), // TX_TOP_B_TIMEOUT_CNT_BYTE_1_TIMEOUT_CNT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+16,0,0,8,0,1,0), // TX_TOP_B_TIMEOUT_CNT_BYTE_0_TIMEOUT_CNT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+17,0,0,8,1,1,0), // TX_TOP_B_TX_FSM_STATUS_TX_STATUS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+18,3,0,1,1,1,0), // TX_TOP_B_DUMMY_CONTROL_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+32,5,0,3,0,1,0), // TX_TOP_B_TX_RFFE_IF_CTRL_PLL_DIV_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+32,4,0,1,0,1,1), // TX_TOP_B_TX_RFFE_IF_CTRL_TX_CLK_EDGE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+32,3,0,1,0,1,1), // TX_TOP_B_TX_RFFE_IF_CTRL_TX_MODE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+32,2,0,1,0,1,0), // TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_DST
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+32,0,0,2,0,1,0), // TX_TOP_B_TX_RFFE_IF_CTRL_TX_IF_SRC
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+33,1,0,1,0,1,0), // TX_TOP_B_TX_RFFE_IF_CTRL2_SX125X_IQ_INVERT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+33,0,0,1,0,1,0), // TX_TOP_B_TX_RFFE_IF_CTRL2_PLL_DIV_CTRL_AGC
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+34,0,0,2,0,1,0), // TX_TOP_B_TX_RFFE_IF_IQ_GAIN_IQ_GAIN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+35,0,0,8,0,1,0), // TX_TOP_B_TX_RFFE_IF_I_OFFSET_I_OFFSET
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+36,0,0,8,0,1,0), // TX_TOP_B_TX_RFFE_IF_Q_OFFSET_Q_OFFSET
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+37,0,0,8,0,1,108), // TX_TOP_B_TX_RFFE_IF_FREQ_RF_H_FREQ_RF
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+38,0,0,8,0,1,144), // TX_TOP_B_TX_RFFE_IF_FREQ_RF_M_FREQ_RF
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+39,0,0,8,0,1,0), // TX_TOP_B_TX_RFFE_IF_FREQ_RF_L_FREQ_RF
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+40,0,0,4,0,1,0), // TX_TOP_B_TX_RFFE_IF_FREQ_DEV_H_FREQ_DEV
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+41,0,0,8,0,1,0), // TX_TOP_B_TX_RFFE_IF_FREQ_DEV_L_FREQ_DEV
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+42,0,0,8,0,1,64), // TX_TOP_B_TX_RFFE_IF_TEST_MOD_FREQ
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+43,3,0,1,1,1,0), // TX_TOP_B_DUMMY_MODULATOR_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+64,0,0,8,0,1,15), // TX_TOP_B_FSK_PKT_LEN_PKT_LENGTH
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+65,5,0,1,0,1,0), // TX_TOP_B_FSK_CFG_0_TX_CONT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+65,4,0,1,0,1,0), // TX_TOP_B_FSK_CFG_0_CRC_IBM
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+65,2,0,2,0,1,0), // TX_TOP_B_FSK_CFG_0_DCFREE_ENC
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+65,1,0,1,0,1,1), // TX_TOP_B_FSK_CFG_0_CRC_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+65,0,0,1,0,1,0), // TX_TOP_B_FSK_CFG_0_PKT_MODE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+66,0,0,8,0,1,0), // TX_TOP_B_FSK_PREAMBLE_SIZE_MSB_PREAMBLE_SIZE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+67,0,0,8,0,1,20), // TX_TOP_B_FSK_PREAMBLE_SIZE_LSB_PREAMBLE_SIZE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+68,0,0,8,0,1,26), // TX_TOP_B_FSK_BIT_RATE_MSB_BIT_RATE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+69,0,0,8,0,1,11), // TX_TOP_B_FSK_BIT_RATE_LSB_BIT_RATE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+70,5,0,3,0,1,3), // TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_SIZE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+70,4,0,1,0,1,0), // TX_TOP_B_FSK_MOD_FSK_PREAMBLE_SEQ
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+70,3,0,1,0,1,1), // TX_TOP_B_FSK_MOD_FSK_REF_PATTERN_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+70,1,0,2,0,1,0), // TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_SELECT_BT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+70,0,0,1,0,1,0), // TX_TOP_B_FSK_MOD_FSK_GAUSSIAN_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+71,0,0,8,0,1,151), // TX_TOP_B_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+72,0,0,8,0,1,35), // TX_TOP_B_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+73,0,0,8,0,1,82), // TX_TOP_B_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+74,0,0,8,0,1,37), // TX_TOP_B_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+75,0,0,8,0,1,86), // TX_TOP_B_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+76,0,0,8,0,1,83), // TX_TOP_B_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+77,0,0,8,0,1,101), // TX_TOP_B_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+78,0,0,8,0,1,100), // TX_TOP_B_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+79,3,0,1,1,1,0), // TX_TOP_B_DUMMY_GSFK_DUMMY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+96,4,0,4,0,1,5), // TX_TOP_B_TXRX_CFG0_0_MODEM_BW
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+96,0,0,4,0,1,7), // TX_TOP_B_TXRX_CFG0_0_MODEM_SF
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+97,6,0,2,0,1,2), // TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET_HDR_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+97,4,0,2,0,1,0), // TX_TOP_B_TXRX_CFG0_1_PPM_OFFSET
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+97,3,0,1,0,1,0), // TX_TOP_B_TXRX_CFG0_1_POST_PREAMBLE_GAP_LONG
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+97,0,0,3,0,1,2), // TX_TOP_B_TXRX_CFG0_1_CODING_RATE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+98,7,0,1,0,1,0), // TX_TOP_B_TXRX_CFG0_2_FINE_SYNCH_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+98,6,0,1,0,1,0), // TX_TOP_B_TXRX_CFG0_2_MODEM_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+98,4,0,2,0,1,2), // TX_TOP_B_TXRX_CFG0_2_CADRXTX
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+98,1,0,1,0,1,0), // TX_TOP_B_TXRX_CFG0_2_IMPLICIT_HEADER
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+98,0,0,1,0,1,1), // TX_TOP_B_TXRX_CFG0_2_CRC_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+99,0,0,8,0,1,12), // TX_TOP_B_TXRX_CFG0_3_PAYLOAD_LENGTH
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+100,7,0,1,0,1,0), // TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE_EN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+100,0,0,6,0,1,0), // TX_TOP_B_TXRX_CFG1_0_INT_STEP_ORIDE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+101,7,0,1,0,1,0), // TX_TOP_B_TXRX_CFG1_1_MODEM_START
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+101,6,0,1,0,1,0), // TX_TOP_B_TXRX_CFG1_1_HEADER_DIFF_MODE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+101,0,0,6,0,1,0), // TX_TOP_B_TXRX_CFG1_1_ZERO_PAD
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+102,0,0,8,0,1,8), // TX_TOP_B_TXRX_CFG1_2_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+103,0,0,8,0,1,0), // TX_TOP_B_TXRX_CFG1_3_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+104,6,0,1,0,1,1), // TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_INT_DELAY
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+104,5,0,1,0,1,0), // TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_RX
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+104,4,0,1,0,1,0), // TX_TOP_B_TXRX_CFG1_4_AUTO_ACK_TX
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+105,4,0,3,0,1,0), // TX_TOP_B_TX_CFG0_0_CHIRP_LOWPASS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+105,3,0,1,0,1,0), // TX_TOP_B_TX_CFG0_0_PPM_OFFSET_SIG
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+105,2,0,1,0,1,1), // TX_TOP_B_TX_CFG0_0_CONTCHIRP
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+105,1,0,1,0,1,1), // TX_TOP_B_TX_CFG0_0_CHIRP_INVERT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+105,0,0,1,0,1,0), // TX_TOP_B_TX_CFG0_0_CONTINUOUS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+106,0,0,6,0,1,20), // TX_TOP_B_TX_CFG0_1_POWER_RANGING
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+107,0,0,8,0,1,0), // TX_TOP_B_TX_CFG1_0_FRAME_NB
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+108,5,0,2,0,1,0), // TX_TOP_B_TX_CFG1_1_HOP_CTRL
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+108,0,0,5,0,1,10), // TX_TOP_B_TX_CFG1_1_IFS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+109,7,0,1,0,1,1), // TX_TOP_B_FRAME_SYNCH_0_AUTO_SCALE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+109,6,0,1,0,1,0), // TX_TOP_B_FRAME_SYNCH_0_DROP_ON_SYNCH
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+109,5,0,1,0,1,1), // TX_TOP_B_FRAME_SYNCH_0_GAIN
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+109,0,1,5,0,1,2), // TX_TOP_B_FRAME_SYNCH_0_PEAK1_POS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+110,7,0,1,0,1,0), // TX_TOP_B_FRAME_SYNCH_1_FINETIME_ON_LAST
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+110,5,0,2,0,1,3), // TX_TOP_B_FRAME_SYNCH_1_TIMEOUT_OPT
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+110,0,1,5,0,1,4), // TX_TOP_B_FRAME_SYNCH_1_PEAK2_POS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+111,0,0,4,1,1,0), // TX_TOP_B_LORA_TX_STATE_STATUS
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+112,2,0,1,0,0,0), // TX_TOP_B_LORA_TX_FLAG_FRAME_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+112,1,0,1,0,0,0), // TX_TOP_B_LORA_TX_FLAG_CONT_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+112,0,0,1,0,0,0), // TX_TOP_B_LORA_TX_FLAG_PLD_DONE
    LgwReg::new(0,SX1302_REG_TX_TOP_B_BASE_ADDR+113,3,0,1,1,1,0), // TX_TOP_B_DUMMY_LORA_DUMMY
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+0,0,0,4,0,1,0), // GPIO_GPIO_DIR_H_DIRECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+1,0,0,8,0,1,0), // GPIO_GPIO_DIR_L_DIRECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+2,0,0,4,0,1,0), // GPIO_GPIO_OUT_H_OUT_VALUE
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+3,0,0,8,0,1,0), // GPIO_GPIO_OUT_L_OUT_VALUE
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+4,0,0,4,1,1,0), // GPIO_GPIO_IN_H_IN_VALUE
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+5,0,0,8,1,1,0), // GPIO_GPIO_IN_L_IN_VALUE
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+6,0,0,4,0,1,0), // GPIO_GPIO_PD_H_PD_VALUE
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+7,0,0,8,0,1,0), // GPIO_GPIO_PD_L_PD_VALUE
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+8,0,0,4,0,1,0), // GPIO_GPIO_SEL_0_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+9,0,0,4,0,1,0), // GPIO_GPIO_SEL_1_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+10,0,0,4,0,1,0), // GPIO_GPIO_SEL_2_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+11,0,0,4,0,1,0), // GPIO_GPIO_SEL_3_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+12,0,0,4,0,1,0), // GPIO_GPIO_SEL_4_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+13,0,0,4,0,1,0), // GPIO_GPIO_SEL_5_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+14,0,0,4,0,1,0), // GPIO_GPIO_SEL_6_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+15,0,0,4,0,1,0), // GPIO_GPIO_SEL_7_SELECTION
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+16,1,0,4,0,1,0), // GPIO_GPIO_SEL_8_11_GPIO_11_9_SEL
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+16,0,0,1,0,1,0), // GPIO_GPIO_SEL_8_11_GPIO_8_SEL
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+17,5,0,1,0,0,0), // GPIO_HOST_IRQ_TX_TIMEOUT_B
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+17,4,0,1,0,0,0), // GPIO_HOST_IRQ_TX_TIMEOUT_A
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+17,3,0,1,0,0,0), // GPIO_HOST_IRQ_TX_DONE_B
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+17,2,0,1,0,0,0), // GPIO_HOST_IRQ_TX_DONE_A
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+17,1,0,1,0,0,0), // GPIO_HOST_IRQ_TIMESTAMP
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+17,0,0,1,0,0,0), // GPIO_HOST_IRQ_RX_BUFFER_WATERMARK
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+18,5,0,1,0,1,0), // GPIO_HOST_IRQ_EN_TX_TIMEOUT_B
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+18,4,0,1,0,1,0), // GPIO_HOST_IRQ_EN_TX_TIMEOUT_A
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+18,3,0,1,0,1,0), // GPIO_HOST_IRQ_EN_TX_DONE_B
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+18,2,0,1,0,1,0), // GPIO_HOST_IRQ_EN_TX_DONE_A
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+18,1,0,1,0,1,0), // GPIO_HOST_IRQ_EN_TIMESTAMP
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+18,0,0,1,0,1,0), // GPIO_HOST_IRQ_EN_RX_BUFFER_WATERMARK
    LgwReg::new(0,SX1302_REG_GPIO_BASE_ADDR+19,0,0,1,1,1,0), // GPIO_DUMMY_DUMMY
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+0,1,0,1,0,1,0), // TIMESTAMP_GPS_CTRL_GPS_POL
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+0,0,0,1,0,1,0), // TIMESTAMP_GPS_CTRL_GPS_EN
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+1,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_PPS_MSB2_TIMESTAMP_PPS
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+2,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_PPS_MSB1_TIMESTAMP_PPS
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+3,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_PPS_LSB2_TIMESTAMP_PPS
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+4,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_PPS_LSB1_TIMESTAMP_PPS
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+5,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_MSB2_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+6,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_MSB1_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+7,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_LSB2_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+8,0,0,8,1,1,0), // TIMESTAMP_TIMESTAMP_LSB1_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+9,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_SET3_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+10,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_SET2_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+11,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_SET1_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+12,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_SET0_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+13,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_IRQ_3_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+14,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_IRQ_2_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+15,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_IRQ_1_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+16,0,0,8,0,1,0), // TIMESTAMP_TIMESTAMP_IRQ_0_TIMESTAMP
    LgwReg::new(0,SX1302_REG_TIMESTAMP_BASE_ADDR+17,0,0,1,1,1,0), // TIMESTAMP_DUMMY_DUMMY
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+0,0,0,5,0,1,0), // RX_TOP_FREQ_0_MSB_IF_FREQ_0
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+1,0,0,8,0,1,128), // RX_TOP_FREQ_0_LSB_IF_FREQ_0
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+2,0,0,5,0,1,1), // RX_TOP_FREQ_1_MSB_IF_FREQ_1
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+3,0,0,8,0,1,128), // RX_TOP_FREQ_1_LSB_IF_FREQ_1
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+4,0,0,5,0,1,30), // RX_TOP_FREQ_2_MSB_IF_FREQ_2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+5,0,0,8,0,1,128), // RX_TOP_FREQ_2_LSB_IF_FREQ_2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+6,0,0,5,0,1,0), // RX_TOP_FREQ_3_MSB_IF_FREQ_3
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+7,0,0,8,0,1,128), // RX_TOP_FREQ_3_LSB_IF_FREQ_3
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+8,0,0,5,0,1,0), // RX_TOP_FREQ_4_MSB_IF_FREQ_4
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+9,0,0,8,0,1,50), // RX_TOP_FREQ_4_LSB_IF_FREQ_4
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+10,0,0,5,0,1,0), // RX_TOP_FREQ_5_MSB_IF_FREQ_5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+11,0,0,8,0,1,60), // RX_TOP_FREQ_5_LSB_IF_FREQ_5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+12,0,0,5,0,1,0), // RX_TOP_FREQ_6_MSB_IF_FREQ_6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+13,0,0,8,0,1,70), // RX_TOP_FREQ_6_LSB_IF_FREQ_6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+14,0,0,5,0,1,0), // RX_TOP_FREQ_7_MSB_IF_FREQ_7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+15,0,0,8,0,1,80), // RX_TOP_FREQ_7_LSB_IF_FREQ_7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+16,0,0,8,0,1,0), // RX_TOP_RADIO_SELECT_RADIO_SELECT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+17,3,0,5,0,1,7), // RX_TOP_RSSI_CONTROL_RSSI_FILTER_ALPHA
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+17,0,0,3,0,1,0), // RX_TOP_RSSI_CONTROL_SELECT_RSSI
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+18,0,0,8,0,1,0), // RX_TOP_RSSI_DEF_VALUE_CHAN_RSSI_DEF_VALUE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+19,0,0,8,0,1,0), // RX_TOP_CHANN_DAGC_CFG1_CHAN_DAGC_THRESHOLD_HIGH
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+20,0,0,8,0,1,0), // RX_TOP_CHANN_DAGC_CFG2_CHAN_DAGC_THRESHOLD_LOW
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+21,4,0,4,0,1,15), // RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MAX_ATTEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+21,0,0,4,0,1,0), // RX_TOP_CHANN_DAGC_CFG3_CHAN_DAGC_MIN_ATTEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+22,0,0,4,0,1,0), // RX_TOP_CHANN_DAGC_CFG4_CHAN_DAGC_STEP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+23,0,0,2,0,1,0), // RX_TOP_CHANN_DAGC_CFG5_CHAN_DAGC_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+24,0,0,8,1,1,0), // RX_TOP_RSSI_VALUE_CHAN_RSSI
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+25,4,0,1,0,1,0), // RX_TOP_GAIN_CONTROL_CHAN_GAIN_VALID
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+25,0,0,4,0,1,0), // RX_TOP_GAIN_CONTROL_CHAN_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+26,0,0,1,0,1,1), // RX_TOP_CLK_CONTROL_CHAN_CLK_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+27,0,0,1,1,1,0), // RX_TOP_DUMMY0_DUMMY0
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+32,0,0,8,0,1,255), // RX_TOP_CORR_CLOCK_ENABLE_CLK_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+33,0,0,8,0,1,0), // RX_TOP_CORRELATOR_EN_CORR_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+34,0,0,8,0,1,255), // RX_TOP_CORRELATOR_SF_EN_CORR_SF_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+35,0,0,8,0,1,255), // RX_TOP_CORRELATOR_ENABLE_ONLY_FIRST_DET_EDGE_ENABLE_ONLY_FIRST_DET_EDGE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+36,0,0,8,0,1,255), // RX_TOP_CORRELATOR_ENABLE_ACC_CLEAR_ENABLE_CORR_ACC_CLEAR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+37,6,0,2,0,1,2), // RX_TOP_SF5_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+37,5,0,1,0,1,1), // RX_TOP_SF5_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+37,4,0,1,0,1,1), // RX_TOP_SF5_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+37,2,0,2,0,1,2), // RX_TOP_SF5_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+37,1,0,1,0,1,1), // RX_TOP_SF5_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+37,0,0,1,0,1,1), // RX_TOP_SF5_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+38,7,0,1,0,1,0), // RX_TOP_SF5_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+38,0,0,7,0,1,55), // RX_TOP_SF5_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+39,0,0,8,0,1,11), // RX_TOP_SF5_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+40,0,0,7,0,1,32), // RX_TOP_SF5_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+41,0,0,7,0,1,48), // RX_TOP_SF5_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+42,3,0,3,0,1,5), // RX_TOP_SF5_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+42,1,0,2,0,1,1), // RX_TOP_SF5_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+42,0,0,1,0,1,1), // RX_TOP_SF5_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+43,2,0,3,0,1,5), // RX_TOP_SF5_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+43,0,0,2,0,1,2), // RX_TOP_SF5_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+44,6,0,2,0,1,2), // RX_TOP_SF6_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+44,5,0,1,0,1,1), // RX_TOP_SF6_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+44,4,0,1,0,1,1), // RX_TOP_SF6_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+44,2,0,2,0,1,2), // RX_TOP_SF6_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+44,1,0,1,0,1,1), // RX_TOP_SF6_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+44,0,0,1,0,1,1), // RX_TOP_SF6_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+45,7,0,1,0,1,0), // RX_TOP_SF6_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+45,0,0,7,0,1,55), // RX_TOP_SF6_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+46,0,0,8,0,1,11), // RX_TOP_SF6_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+47,0,0,7,0,1,32), // RX_TOP_SF6_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+48,0,0,7,0,1,48), // RX_TOP_SF6_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+49,3,0,3,0,1,4), // RX_TOP_SF6_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+49,1,0,2,0,1,1), // RX_TOP_SF6_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+49,0,0,1,0,1,1), // RX_TOP_SF6_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+50,2,0,3,0,1,5), // RX_TOP_SF6_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+50,0,0,2,0,1,2), // RX_TOP_SF6_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+51,6,0,2,0,1,2), // RX_TOP_SF7_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+51,5,0,1,0,1,1), // RX_TOP_SF7_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+51,4,0,1,0,1,1), // RX_TOP_SF7_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+51,2,0,2,0,1,2), // RX_TOP_SF7_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+51,1,0,1,0,1,1), // RX_TOP_SF7_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+51,0,0,1,0,1,1), // RX_TOP_SF7_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+52,7,0,1,0,1,0), // RX_TOP_SF7_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+52,0,0,7,0,1,55), // RX_TOP_SF7_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+53,0,0,8,0,1,11), // RX_TOP_SF7_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+54,0,0,7,0,1,32), // RX_TOP_SF7_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+55,0,0,7,0,1,48), // RX_TOP_SF7_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+56,3,0,3,0,1,3), // RX_TOP_SF7_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+56,1,0,2,0,1,1), // RX_TOP_SF7_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+56,0,0,1,0,1,1), // RX_TOP_SF7_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+57,2,0,3,0,1,5), // RX_TOP_SF7_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+57,0,0,2,0,1,2), // RX_TOP_SF7_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+58,6,0,2,0,1,2), // RX_TOP_SF8_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+58,5,0,1,0,1,1), // RX_TOP_SF8_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+58,4,0,1,0,1,1), // RX_TOP_SF8_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+58,2,0,2,0,1,2), // RX_TOP_SF8_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+58,1,0,1,0,1,1), // RX_TOP_SF8_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+58,0,0,1,0,1,1), // RX_TOP_SF8_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+59,7,0,1,0,1,0), // RX_TOP_SF8_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+59,0,0,7,0,1,56), // RX_TOP_SF8_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+60,0,0,8,0,1,11), // RX_TOP_SF8_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+61,0,0,7,0,1,32), // RX_TOP_SF8_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+62,0,0,7,0,1,48), // RX_TOP_SF8_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+63,3,0,3,0,1,3), // RX_TOP_SF8_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+63,1,0,2,0,1,1), // RX_TOP_SF8_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+63,0,0,1,0,1,1), // RX_TOP_SF8_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+64,2,0,3,0,1,5), // RX_TOP_SF8_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+64,0,0,2,0,1,2), // RX_TOP_SF8_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+65,6,0,2,0,1,2), // RX_TOP_SF9_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+65,5,0,1,0,1,1), // RX_TOP_SF9_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+65,4,0,1,0,1,1), // RX_TOP_SF9_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+65,2,0,2,0,1,2), // RX_TOP_SF9_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+65,1,0,1,0,1,1), // RX_TOP_SF9_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+65,0,0,1,0,1,1), // RX_TOP_SF9_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+66,7,0,1,0,1,0), // RX_TOP_SF9_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+66,0,0,7,0,1,58), // RX_TOP_SF9_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+67,0,0,8,0,1,11), // RX_TOP_SF9_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+68,0,0,7,0,1,32), // RX_TOP_SF9_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+69,0,0,7,0,1,48), // RX_TOP_SF9_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+70,3,0,3,0,1,3), // RX_TOP_SF9_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+70,1,0,2,0,1,1), // RX_TOP_SF9_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+70,0,0,1,0,1,1), // RX_TOP_SF9_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+71,2,0,3,0,1,5), // RX_TOP_SF9_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+71,0,0,2,0,1,2), // RX_TOP_SF9_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+72,6,0,2,0,1,2), // RX_TOP_SF10_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+72,5,0,1,0,1,1), // RX_TOP_SF10_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+72,4,0,1,0,1,1), // RX_TOP_SF10_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+72,2,0,2,0,1,2), // RX_TOP_SF10_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+72,1,0,1,0,1,1), // RX_TOP_SF10_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+72,0,0,1,0,1,1), // RX_TOP_SF10_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+73,7,0,1,0,1,0), // RX_TOP_SF10_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+73,0,0,7,0,1,60), // RX_TOP_SF10_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+74,0,0,8,0,1,11), // RX_TOP_SF10_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+75,0,0,7,0,1,32), // RX_TOP_SF10_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+76,0,0,7,0,1,48), // RX_TOP_SF10_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+77,3,0,3,0,1,3), // RX_TOP_SF10_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+77,1,0,2,0,1,1), // RX_TOP_SF10_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+77,0,0,1,0,1,1), // RX_TOP_SF10_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+78,2,0,3,0,1,5), // RX_TOP_SF10_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+78,0,0,2,0,1,2), // RX_TOP_SF10_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+79,6,0,2,0,1,2), // RX_TOP_SF11_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+79,5,0,1,0,1,1), // RX_TOP_SF11_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+79,4,0,1,0,1,1), // RX_TOP_SF11_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+79,2,0,2,0,1,2), // RX_TOP_SF11_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+79,1,0,1,0,1,1), // RX_TOP_SF11_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+79,0,0,1,0,1,1), // RX_TOP_SF11_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+80,7,0,1,0,1,0), // RX_TOP_SF11_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+80,0,0,7,0,1,60), // RX_TOP_SF11_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+81,0,0,8,0,1,11), // RX_TOP_SF11_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+82,0,0,7,0,1,32), // RX_TOP_SF11_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+83,0,0,7,0,1,48), // RX_TOP_SF11_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+84,3,0,3,0,1,3), // RX_TOP_SF11_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+84,1,0,2,0,1,1), // RX_TOP_SF11_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+84,0,0,1,0,1,1), // RX_TOP_SF11_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+85,2,0,3,0,1,5), // RX_TOP_SF11_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+85,0,0,2,0,1,2), // RX_TOP_SF11_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+86,6,0,2,0,1,2), // RX_TOP_SF12_CFG1_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+86,5,0,1,0,1,1), // RX_TOP_SF12_CFG1_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+86,4,0,1,0,1,1), // RX_TOP_SF12_CFG1_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+86,2,0,2,0,1,2), // RX_TOP_SF12_CFG1_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+86,1,0,1,0,1,1), // RX_TOP_SF12_CFG1_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+86,0,0,1,0,1,1), // RX_TOP_SF12_CFG1_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+87,7,0,1,0,1,0), // RX_TOP_SF12_CFG2_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+87,0,0,7,0,1,60), // RX_TOP_SF12_CFG2_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+88,0,0,8,0,1,11), // RX_TOP_SF12_CFG3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+89,0,0,7,0,1,32), // RX_TOP_SF12_CFG4_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+90,0,0,7,0,1,48), // RX_TOP_SF12_CFG5_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+91,3,0,3,0,1,3), // RX_TOP_SF12_CFG6_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+91,1,0,2,0,1,1), // RX_TOP_SF12_CFG6_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+91,0,0,1,0,1,1), // RX_TOP_SF12_CFG6_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+92,2,0,3,0,1,5), // RX_TOP_SF12_CFG7_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+92,0,0,2,0,1,2), // RX_TOP_SF12_CFG7_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+93,0,0,1,1,1,0), // RX_TOP_DUMMY1_DUMMY1
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+96,4,0,3,0,1,0), // RX_TOP_DC_NOTCH_CFG1_BW_START
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+96,3,0,1,0,1,1), // RX_TOP_DC_NOTCH_CFG1_AUTO_BW_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+96,2,0,1,0,1,0), // RX_TOP_DC_NOTCH_CFG1_NO_FAST_START
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+96,1,0,1,0,1,0), // RX_TOP_DC_NOTCH_CFG1_BYPASS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+96,0,0,1,0,1,0), // RX_TOP_DC_NOTCH_CFG1_ENABLE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+97,3,0,3,0,1,1), // RX_TOP_DC_NOTCH_CFG2_BW_LOCKED
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+97,0,0,3,0,1,5), // RX_TOP_DC_NOTCH_CFG2_BW
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+98,0,0,3,0,1,0), // RX_TOP_DC_NOTCH_CFG3_BW_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+99,0,0,8,0,1,0), // RX_TOP_DC_NOTCH_CFG4_IIR_DCC_TIME
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+100,0,1,8,0,1,2), // RX_TOP_RX_DFE_FIR1_0_FIR1_COEFF_0
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+101,0,1,8,0,1,3), // RX_TOP_RX_DFE_FIR1_1_FIR1_COEFF_1
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+102,0,1,8,0,1,2), // RX_TOP_RX_DFE_FIR1_2_FIR1_COEFF_2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+103,0,1,8,0,1,3), // RX_TOP_RX_DFE_FIR1_3_FIR1_COEFF_3
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+104,0,1,8,0,1,5), // RX_TOP_RX_DFE_FIR1_4_FIR1_COEFF_4
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+105,0,1,8,0,1,8), // RX_TOP_RX_DFE_FIR1_5_FIR1_COEFF_5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+106,0,1,8,0,1,6), // RX_TOP_RX_DFE_FIR1_6_FIR1_COEFF_6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+107,0,1,8,0,1,4), // RX_TOP_RX_DFE_FIR1_7_FIR1_COEFF_7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+108,0,1,8,0,1,2), // RX_TOP_RX_DFE_FIR2_0_FIR2_COEFF_0
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+109,0,1,8,0,1,-2), // RX_TOP_RX_DFE_FIR2_1_FIR2_COEFF_1
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+110,0,1,8,0,1,-4), // RX_TOP_RX_DFE_FIR2_2_FIR2_COEFF_2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+111,0,1,8,0,1,-3), // RX_TOP_RX_DFE_FIR2_3_FIR2_COEFF_3
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+112,0,1,8,0,1,3), // RX_TOP_RX_DFE_FIR2_4_FIR2_COEFF_4
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+113,0,1,8,0,1,11), // RX_TOP_RX_DFE_FIR2_5_FIR2_COEFF_5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+114,0,1,8,0,1,19), // RX_TOP_RX_DFE_FIR2_6_FIR2_COEFF_6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+115,0,1,8,0,1,10), // RX_TOP_RX_DFE_FIR2_7_FIR2_COEFF_7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+116,7,0,1,0,1,0), // RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+116,0,0,7,0,1,0), // RX_TOP_RX_DFE_AGC0_RADIO_GAIN_RED_DB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+117,4,0,1,0,1,0), // RX_TOP_RX_DFE_AGC1_DC_COMP_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+117,3,0,1,0,1,0), // RX_TOP_RX_DFE_AGC1_FORCE_DEFAULT_FIR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+117,2,0,1,0,1,1), // RX_TOP_RX_DFE_AGC1_RSSI_EARLY_LATCH
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+117,0,0,2,0,1,3), // RX_TOP_RX_DFE_AGC1_FREEZE_ON_SYNC
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+118,6,0,1,0,1,0), // RX_TOP_RX_DFE_AGC2_DAGC_IN_COMP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+118,5,0,1,0,1,1), // RX_TOP_RX_DFE_AGC2_DAGC_FIR_HYST
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+118,3,0,2,0,1,1), // RX_TOP_RX_DFE_AGC2_RSSI_MAX_SAMPLE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+118,0,0,3,0,1,2), // RX_TOP_RX_DFE_AGC2_RSSI_MIN_SAMPLE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+119,7,0,1,0,1,0), // RX_TOP_RX_DFE_GAIN0_DAGC_FIR_FAST
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+119,6,0,1,0,1,0), // RX_TOP_RX_DFE_GAIN0_FORCE_GAIN_FIR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+119,4,0,2,0,1,3), // RX_TOP_RX_DFE_GAIN0_GAIN_FIR1
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+119,0,0,3,0,1,1), // RX_TOP_RX_DFE_GAIN0_GAIN_FIR2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+120,6,0,2,0,1,0), // RX_TOP_DAGC_CFG_TARGET_LVL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+120,5,0,1,0,1,0), // RX_TOP_DAGC_CFG_GAIN_INCR_STEP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+120,4,0,1,0,1,0), // RX_TOP_DAGC_CFG_GAIN_DROP_COMP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+120,3,0,1,0,1,1), // RX_TOP_DAGC_CFG_COMB_FILTER_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+120,2,0,1,0,1,0), // RX_TOP_DAGC_CFG_NO_FREEZE_START
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+120,0,0,2,0,1,3), // RX_TOP_DAGC_CFG_FREEZE_ON_SYNC
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+121,0,0,8,0,1,60), // RX_TOP_DAGC_CNT0_SAMPLE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+122,0,0,8,0,1,6), // RX_TOP_DAGC_CNT1_THR_M6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+123,0,0,8,0,1,25), // RX_TOP_DAGC_CNT2_THR_M12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+124,0,0,8,0,1,42), // RX_TOP_DAGC_CNT3_THR_M18
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+125,4,0,4,0,1,8), // RX_TOP_DAGC_CNT4_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+125,0,0,1,0,1,0), // RX_TOP_DAGC_CNT4_FORCE_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+126,6,0,2,0,1,2), // RX_TOP_TXRX_CFG1_PPM_OFFSET_HDR_CTRL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+126,4,0,2,0,1,0), // RX_TOP_TXRX_CFG1_PPM_OFFSET
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+126,3,0,1,0,1,0), // RX_TOP_TXRX_CFG1_MODEM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+126,0,0,3,0,1,2), // RX_TOP_TXRX_CFG1_CODING_RATE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+127,4,0,1,0,0,0), // RX_TOP_TXRX_CFG2_MODEM_START
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+127,2,0,2,0,1,1), // RX_TOP_TXRX_CFG2_CADRXTX
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+127,1,0,1,0,1,0), // RX_TOP_TXRX_CFG2_IMPLICIT_HEADER
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+127,0,0,1,0,1,1), // RX_TOP_TXRX_CFG2_CRC_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+128,0,0,8,0,1,12), // RX_TOP_TXRX_CFG3_PAYLOAD_LENGTH
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+129,7,0,1,0,1,0), // RX_TOP_TXRX_CFG4_INT_STEP_ORIDE_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+129,0,0,6,0,1,0), // RX_TOP_TXRX_CFG4_INT_STEP_ORIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+130,6,0,1,0,1,0), // RX_TOP_TXRX_CFG5_HEADER_DIFF_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+130,0,0,6,0,1,0), // RX_TOP_TXRX_CFG5_ZERO_PAD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+131,0,0,8,0,1,8), // RX_TOP_TXRX_CFG6_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+132,0,0,8,0,1,0), // RX_TOP_TXRX_CFG7_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+133,3,0,1,0,1,1), // RX_TOP_TXRX_CFG8_AUTO_ACK_INT_DELAY
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+133,2,0,1,0,1,0), // RX_TOP_TXRX_CFG8_AUTO_ACK_RX
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+133,1,0,1,0,1,0), // RX_TOP_TXRX_CFG8_AUTO_ACK_TX
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+133,0,0,1,0,1,0), // RX_TOP_TXRX_CFG8_POST_PREAMBLE_GAP_LONG
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,7,0,1,0,1,0), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,6,0,1,0,1,0), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF11
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,5,0,1,0,1,0), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF10
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,4,0,1,0,1,0), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF9
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,3,0,1,0,1,0), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF8
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,2,0,1,0,1,0), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,1,0,1,0,1,1), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+134,0,0,1,0,1,1), // RX_TOP_TXRX_CFG9_FINE_SYNCH_EN_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+135,4,0,2,0,1,3), // RX_TOP_RX_CFG0_DFT_PEAK_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+135,2,0,1,0,1,1), // RX_TOP_RX_CFG0_CHIRP_INVERT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+135,1,0,1,0,1,0), // RX_TOP_RX_CFG0_SWAP_IQ
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+135,0,0,1,0,1,0), // RX_TOP_RX_CFG0_CONTINUOUS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+136,0,0,8,0,1,0), // RX_TOP_RX_CFG1_DETECT_TIMEOUT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+137,4,0,1,0,1,1), // RX_TOP_RX_CFG2_CLK_EN_RESYNC_DIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+137,0,0,4,0,1,11), // RX_TOP_RX_CFG2_LLR_SCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+138,0,1,5,0,1,2), // RX_TOP_FRAME_SYNCH0_SF5_PEAK1_POS_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+139,0,1,5,0,1,4), // RX_TOP_FRAME_SYNCH1_SF5_PEAK2_POS_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+140,0,1,5,0,1,2), // RX_TOP_FRAME_SYNCH0_SF6_PEAK1_POS_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+141,0,1,5,0,1,4), // RX_TOP_FRAME_SYNCH1_SF6_PEAK2_POS_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+142,0,1,5,0,1,2), // RX_TOP_FRAME_SYNCH0_SF7TO12_PEAK1_POS_SF7TO12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+143,0,1,5,0,1,4), // RX_TOP_FRAME_SYNCH1_SF7TO12_PEAK2_POS_SF7TO12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+144,5,0,1,0,1,0), // RX_TOP_FRAME_SYNCH2_FINETIME_ON_LAST
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+144,4,0,1,0,1,1), // RX_TOP_FRAME_SYNCH2_AUTO_SCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+144,3,0,1,0,1,0), // RX_TOP_FRAME_SYNCH2_DROP_ON_SYNCH
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+144,2,0,1,0,1,1), // RX_TOP_FRAME_SYNCH2_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+144,0,0,2,0,1,3), // RX_TOP_FRAME_SYNCH2_TIMEOUT_OPT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+145,7,0,1,0,1,1), // RX_TOP_FINE_TIMING_A_0_GAIN_P_HDR_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+145,6,0,1,0,1,0), // RX_TOP_FINE_TIMING_A_0_ROUNDING
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+145,4,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_0_POS_LIMIT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+145,2,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_0_SUM_SIZE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+145,0,0,2,0,1,3), // RX_TOP_FINE_TIMING_A_0_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+146,6,0,2,0,1,1), // RX_TOP_FINE_TIMING_A_1_GAIN_P_AUTO
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+146,3,0,3,0,1,2), // RX_TOP_FINE_TIMING_A_1_GAIN_P_PAYLOAD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+146,0,0,3,0,1,6), // RX_TOP_FINE_TIMING_A_1_GAIN_P_PREAMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+147,6,0,2,0,1,3), // RX_TOP_FINE_TIMING_A_2_GAIN_I_AUTO
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+147,3,0,3,0,1,1), // RX_TOP_FINE_TIMING_A_2_GAIN_I_PAYLOAD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+147,0,0,3,0,1,4), // RX_TOP_FINE_TIMING_A_2_GAIN_I_PREAMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+148,7,0,1,0,1,0), // RX_TOP_FINE_TIMING_A_3_FINESYNCH_SUM
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+148,4,0,3,0,1,5), // RX_TOP_FINE_TIMING_A_3_FINESYNCH_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+149,6,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF8
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+149,4,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+149,2,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+149,0,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_4_GAIN_I_EN_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+150,6,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+150,4,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF11
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+150,2,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF10
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+150,0,0,2,0,1,0), // RX_TOP_FINE_TIMING_A_5_GAIN_I_EN_SF9
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+151,4,0,3,0,1,7), // RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+151,0,0,3,0,1,4), // RX_TOP_FINE_TIMING_A_6_GAIN_P_PREAMB_SF5_6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+152,4,0,3,0,1,0), // RX_TOP_FINE_TIMING_7_GAIN_I_AUTO_MAX
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+152,0,0,3,0,1,0), // RX_TOP_FINE_TIMING_7_GAIN_P_AUTO_MAX
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+153,7,0,1,0,1,1), // RX_TOP_FINE_TIMING_B_0_GAIN_P_HDR_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+153,6,0,1,0,1,0), // RX_TOP_FINE_TIMING_B_0_ROUNDING
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+153,4,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_0_POS_LIMIT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+153,2,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_0_SUM_SIZE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+153,0,0,2,0,1,3), // RX_TOP_FINE_TIMING_B_0_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+154,6,0,2,0,1,1), // RX_TOP_FINE_TIMING_B_1_GAIN_P_AUTO
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+154,3,0,3,0,1,2), // RX_TOP_FINE_TIMING_B_1_GAIN_P_PAYLOAD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+154,0,0,3,0,1,6), // RX_TOP_FINE_TIMING_B_1_GAIN_P_PREAMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+155,6,0,2,0,1,3), // RX_TOP_FINE_TIMING_B_2_GAIN_I_AUTO
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+155,3,0,3,0,1,1), // RX_TOP_FINE_TIMING_B_2_GAIN_I_PAYLOAD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+155,0,0,3,0,1,4), // RX_TOP_FINE_TIMING_B_2_GAIN_I_PREAMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+156,7,0,1,0,1,0), // RX_TOP_FINE_TIMING_B_3_FINESYNCH_SUM
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+156,4,0,3,0,1,5), // RX_TOP_FINE_TIMING_B_3_FINESYNCH_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+157,6,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF8
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+157,4,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+157,2,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+157,0,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_4_GAIN_I_EN_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+158,6,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+158,4,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF11
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+158,2,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF10
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+158,0,0,2,0,1,0), // RX_TOP_FINE_TIMING_B_5_GAIN_I_EN_SF9
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+159,4,0,3,0,1,7), // RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+159,0,0,3,0,1,4), // RX_TOP_FINE_TIMING_B_6_GAIN_P_PREAMB_SF5_6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+160,0,0,4,0,1,9), // RX_TOP_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+161,0,0,8,0,1,112), // RX_TOP_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+162,0,0,3,0,1,3), // RX_TOP_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+163,5,0,1,0,1,0), // RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+163,4,0,1,0,1,0), // RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+163,3,0,1,0,1,1), // RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+163,2,0,1,0,1,0), // RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+163,1,0,1,0,1,0), // RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+163,0,0,1,0,1,1), // RX_TOP_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+164,0,0,8,0,1,33), // RX_TOP_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+165,6,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF8
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+165,4,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+165,2,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+165,0,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_0_FREQ_TRACK_EN_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+166,6,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+166,4,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF11
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+166,2,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF10
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+166,0,0,2,0,1,3), // RX_TOP_FREQ_TRACK_A_1_FREQ_TRACK_EN_SF9
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+167,6,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF8
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+167,4,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+167,2,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+167,0,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_0_FREQ_TRACK_EN_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+168,6,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+168,4,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF11
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+168,2,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF10
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+168,0,0,2,0,1,3), // RX_TOP_FREQ_TRACK_B_1_FREQ_TRACK_EN_SF9
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+169,7,0,1,0,1,0), // RX_TOP_FREQ_TRACK2_FREQ_TRACK_FINE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+169,4,0,3,0,1,4), // RX_TOP_FREQ_TRACK2_FREQ_TRACK_HDR_SKIP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+170,4,0,3,0,1,5), // RX_TOP_FREQ_TRACK3_FREQ_SYNCH_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+170,0,0,4,0,1,3), // RX_TOP_FREQ_TRACK3_FREQ_TRACK_AUTO_THR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+171,5,0,2,0,1,1), // RX_TOP_FREQ_TRACK4_SNR_MIN_WINDOW
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+171,4,0,1,0,1,0), // RX_TOP_FREQ_TRACK4_GAIN_AUTO_SNR_MIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+171,0,0,4,0,1,8), // RX_TOP_FREQ_TRACK4_FREQ_SYNCH_THR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+172,0,0,7,0,1,32), // RX_TOP_DETECT_MSP0_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+173,0,0,7,0,1,48), // RX_TOP_DETECT_MSP1_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+174,4,0,3,0,1,5), // RX_TOP_DETECT_MSP2_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+174,0,0,3,0,1,3), // RX_TOP_DETECT_MSP2_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+175,6,0,1,0,1,0), // RX_TOP_DETECT_MSP3_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+175,4,0,2,0,1,2), // RX_TOP_DETECT_MSP3_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+175,2,0,1,0,1,1), // RX_TOP_DETECT_MSP3_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+175,0,0,2,0,1,1), // RX_TOP_DETECT_MSP3_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+176,7,0,1,0,1,0), // RX_TOP_DETECT_ACC1_USE_GAIN_SYMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+176,0,0,7,0,1,64), // RX_TOP_DETECT_ACC1_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+177,6,0,2,0,1,2), // RX_TOP_DETECT_ACC2_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+177,4,0,2,0,1,2), // RX_TOP_DETECT_ACC2_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+177,3,0,1,0,1,1), // RX_TOP_DETECT_ACC2_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+177,2,0,1,0,1,1), // RX_TOP_DETECT_ACC2_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+177,1,0,1,0,1,1), // RX_TOP_DETECT_ACC2_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+177,0,0,1,0,1,1), // RX_TOP_DETECT_ACC2_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+178,0,0,8,0,1,11), // RX_TOP_DETECT_ACC3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+179,4,0,1,0,1,0), // RX_TOP_TIMESTAMP_SEL_SNR_MIN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+179,3,0,1,0,1,0), // RX_TOP_TIMESTAMP_ENABLE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+179,0,0,3,0,1,7), // RX_TOP_TIMESTAMP_NB_SYMB
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+180,0,0,8,1,1,0), // RX_TOP_MODEM_BUSY_MSB_RX_MODEM_BUSY
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+181,0,0,8,1,1,0), // RX_TOP_MODEM_BUSY_LSB_RX_MODEM_BUSY
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+182,4,0,4,1,1,0), // RX_TOP_MODEM_STATE_RX_MODEM_STS_SPARE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+182,0,0,4,1,1,0), // RX_TOP_MODEM_STATE_RX_MODEM_STATE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+183,6,0,2,0,1,2), // RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_H
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+183,4,0,2,0,1,3), // RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_GAIN_L
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+183,3,0,1,0,1,1), // RX_TOP_MODEM_SYNC_DELTA_MSB_PEAK_POS_FINE_SIGN
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+183,0,0,3,0,1,0), // RX_TOP_MODEM_SYNC_DELTA_MSB_MODEM_SYNC_DELTA
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+184,0,0,8,0,1,127), // RX_TOP_MODEM_SYNC_DELTA_LSB_MODEM_SYNC_DELTA
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+185,6,0,2,0,1,0), // RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF8
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+185,4,0,2,0,1,0), // RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF7
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+185,2,0,2,0,1,0), // RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF6
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+185,0,0,2,0,1,0), // RX_TOP_MODEM_PPM_OFFSET1_PPM_OFFSET_SF5
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+186,6,0,2,0,1,1), // RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF12
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+186,4,0,2,0,1,1), // RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF11
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+186,2,0,2,0,1,0), // RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF10
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+186,0,0,2,0,1,0), // RX_TOP_MODEM_PPM_OFFSET2_PPM_OFFSET_SF9
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+187,0,0,8,0,1,85), // RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_3_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+188,0,0,8,0,1,85), // RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_2_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+189,0,0,8,0,1,85), // RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_1_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+190,0,0,8,0,1,85), // RX_TOP_MODEM_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+191,0,0,1,1,1,0), // RX_TOP_DUMMY2_DUMMY2
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+192,4,0,1,0,1,0), // RX_TOP_RX_BUFFER_DEBUG_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+192,3,0,1,0,1,0), // RX_TOP_RX_BUFFER_DIRECT_RAM_IF
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+192,2,0,1,0,1,0), // RX_TOP_RX_BUFFER_LEGACY_TIMESTAMP
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+192,1,0,1,0,1,0), // RX_TOP_RX_BUFFER_STORE_HEADER_ERR_META
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+192,0,0,1,0,1,0), // RX_TOP_RX_BUFFER_STORE_SYNC_FAIL_META
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+193,0,0,8,0,1,255), // RX_TOP_RxBufferIMESTAMP_CFG_MAX_TS_METRICS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+194,0,0,5,0,1,0), // RX_TOP_RX_BUFFER_IRQ_CTRL_MSB_RX_BUFFER_IRQ_THRESHOLD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+195,0,0,8,0,1,21), // RX_TOP_RX_BUFFER_IRQ_CTRL_LSB_RX_BUFFER_IRQ_THRESHOLD
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+196,0,0,4,1,1,0), // RX_TOP_RX_BUFFER_LAST_ADDR_READ_MSB_LAST_ADDR_READ
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+197,0,0,8,1,1,0), // RX_TOP_RX_BUFFER_LAST_ADDR_READ_LSB_LAST_ADDR_READ
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+198,0,0,4,1,1,0), // RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_MSB_LAST_ADDR_WRITE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+199,0,0,8,1,1,0), // RX_TOP_RX_BUFFER_LAST_ADDR_WRITE_LSB_LAST_ADDR_WRITE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+200,0,0,5,1,1,0), // RX_TOP_RX_BUFFER_NB_BYTES_MSB_RX_BUFFER_NB_BYTES
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+201,0,0,8,1,1,0), // RX_TOP_RX_BUFFER_NB_BYTES_LSB_RX_BUFFER_NB_BYTES
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+202,0,0,8,1,1,0), // RX_TOP_MULTI_SF_SYNC_ERR_PKT_CNT_MULTI_SF_SYNC_ERR_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+203,0,0,8,1,1,0), // RX_TOP_MULTI_SF_PLD_ERR_PKT_CNT_MULTI_SF_PLD_ERR_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+204,0,0,8,1,1,0), // RX_TOP_MULTI_SF_GOOD_PKT_CNT_MULTI_SF_GOOD_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+205,0,0,8,1,1,0), // RX_TOP_SERV_MODEM_SYNC_ERR_PKT_CNT_SERV_MODEM_SYNC_ERR_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+206,0,0,8,1,1,0), // RX_TOP_SERV_MODEM_PLD_ERR_PKT_CNT_SERV_MODEM_PLD_ERR_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+207,0,0,8,1,1,0), // RX_TOP_SERV_MODEM_GOOD_PKT_CNT_SERV_MODEM_GOOD_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+208,0,0,8,1,1,0), // RX_TOP_GFSK_MODEM_SYNC_ERR_PKT_CNT_GFSK_MODEM_SYNC_ERR_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+209,0,0,8,1,1,0), // RX_TOP_GFSK_MODEM_PLD_ERR_PKT_CNT_GFSK_MODEM_PLD_ERR_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+210,0,0,8,1,1,0), // RX_TOP_GFSK_MODEM_GOOD_PKT_CNT_GFSK_MODEM_GOOD_PKTS
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+211,0,0,2,1,1,0), // RX_TOP_BAD_MODEM_ID_WRITE_0_BAD_MODEM_ID_WRITE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+212,0,0,8,1,1,0), // RX_TOP_BAD_MODEM_ID_WRITE_1_BAD_MODEM_ID_WRITE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+213,0,0,8,1,1,0), // RX_TOP_BAD_MODEM_ID_WRITE_2_BAD_MODEM_ID_WRITE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+214,0,0,2,1,1,0), // RX_TOP_BAD_MODEM_ID_READ_0_BAD_MODEM_ID_READ
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+215,0,0,8,1,1,0), // RX_TOP_BAD_MODEM_ID_READ_1_BAD_MODEM_ID_READ
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+216,0,0,8,1,1,0), // RX_TOP_BAD_MODEM_ID_READ_2_BAD_MODEM_ID_READ
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+217,0,0,2,0,1,1), // RX_TOP_CLOCK_GATE_OVERRIDE_0_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+218,0,0,8,1,1,0), // RX_TOP_SAMPLE_4_MSPS_LATCHED_125K_SAMPLE_4_MSPS_LATCHED_125K
    LgwReg::new(0,SX1302_REG_RX_TOP_BASE_ADDR+219,0,0,1,1,1,0), // RX_TOP_DUMMY3_DUMMY3
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+0,5,0,1,0,1,1), // ARB_MCU_CTRL_CLK_EN
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+0,4,0,1,0,1,0), // ARB_MCU_CTRL_RADIO_RST
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+0,3,0,1,0,1,0), // ARB_MCU_CTRL_FORCE_HOST_FE_CTRL
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+0,2,0,1,0,1,1), // ARB_MCU_CTRL_MCU_CLEAR
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+0,1,0,1,0,1,0), // ARB_MCU_CTRL_HOST_PROG
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+0,0,0,1,1,1,0), // ARB_MCU_CTRL_PARITY_ERROR
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+1,0,0,8,1,1,0), // ARB_MCU_MCU_ARB_STATUS_MCU_ARB_STATUS
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+7,5,0,1,0,1,0), // ARB_MCU_UART_CFG_MSBF
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+7,4,0,1,0,1,0), // ARB_MCU_UART_CFG_PAR_EN
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+7,3,0,1,0,1,0), // ARB_MCU_UART_CFG_PAR_MODE
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+7,2,0,1,0,1,0), // ARB_MCU_UART_CFG_START_LEN
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+7,1,0,1,0,1,0), // ARB_MCU_UART_CFG_STOP_LEN
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+7,0,0,1,0,1,1), // ARB_MCU_UART_CFG_WORD_LEN
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+8,0,0,8,0,1,0), // ARB_MCU_UART_CFG2_BIT_RATE
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+9,0,0,8,0,1,0), // ARB_MCU_ARB_DEBUG_CFG_0_ARB_DEBUG_CFG_0
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+10,0,0,8,0,1,0), // ARB_MCU_ARB_DEBUG_CFG_1_ARB_DEBUG_CFG_1
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+11,0,0,8,0,1,0), // ARB_MCU_ARB_DEBUG_CFG_2_ARB_DEBUG_CFG_2
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+12,0,0,8,0,1,0), // ARB_MCU_ARB_DEBUG_CFG_3_ARB_DEBUG_CFG_3
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+13,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_0_ARB_DEBUG_STS_0
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+14,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_1_ARB_DEBUG_STS_1
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+15,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_2_ARB_DEBUG_STS_2
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+16,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_3_ARB_DEBUG_STS_3
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+17,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_4_ARB_DEBUG_STS_4
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+18,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_5_ARB_DEBUG_STS_5
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+19,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_6_ARB_DEBUG_STS_6
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+20,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_7_ARB_DEBUG_STS_7
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+21,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_8_ARB_DEBUG_STS_8
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+22,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_9_ARB_DEBUG_STS_9
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+23,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_10_ARB_DEBUG_STS_10
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+24,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_11_ARB_DEBUG_STS_11
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+25,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_12_ARB_DEBUG_STS_12
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+26,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_13_ARB_DEBUG_STS_13
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+27,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_14_ARB_DEBUG_STS_14
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+28,0,0,8,1,1,0), // ARB_MCU_ARB_DEBUG_STS_15_ARB_DEBUG_STS_15
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+29,4,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_1_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+29,0,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_01_CHANNEL_0_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+30,4,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_3_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+30,0,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_23_CHANNEL_2_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+31,4,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_5_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+31,0,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_45_CHANNEL_4_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+32,4,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_7_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+32,0,0,4,0,1,0), // ARB_MCU_CHANNEL_SYNC_OFFSET_67_CHANNEL_6_OFFSET
    LgwReg::new(0,SX1302_REG_ARB_MCU_BASE_ADDR+33,0,0,1,1,1,0), // ARB_MCU_DUMMY_DUMMY3
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+0,1,0,1,0,1,0), // RADIO_FE_GLBL_CTRL_DECIM_B_CLR
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+0,0,0,1,0,1,0), // RADIO_FE_GLBL_CTRL_DECIM_A_CLR
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+1,5,0,1,0,1,0), // RADIO_FE_CTRL0_RADIO_A_DC_NOTCH_EN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+1,4,0,1,0,1,0), // RADIO_FE_CTRL0_RADIO_A_FORCE_HOST_FILTER_GAIN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+1,0,0,4,0,1,0), // RADIO_FE_CTRL0_RADIO_A_HOST_FILTER_GAIN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+2,0,0,8,0,1,0), // RADIO_FE_RSSI_DB_DEF_RADIO_A_RSSI_DB_DEFAULT_VALUE
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+3,0,0,8,0,1,0), // RADIO_FE_RSSI_DEC_DEF_RADIO_A_RSSI_DEC_DEFAULT_VALUE
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+4,0,0,8,1,1,0), // RADIO_FE_RSSI_DEC_RD_RADIO_A_RSSI_DEC_OUT
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+5,0,0,8,1,1,0), // RADIO_FE_RSSI_BB_RD_RADIO_A_RSSI_BB_OUT
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+6,0,0,4,1,1,0), // RADIO_FE_DEC_FILTER_RD_RADIO_A_DEC_FILTER_GAIN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+7,0,0,5,0,1,0), // RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_A_RSSI_BB_FILTER_ALPHA
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+8,0,0,5,0,1,0), // RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_A_RSSI_DEC_FILTER_ALPHA
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+9,0,0,6,0,1,0), // RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_A_AMP_COEFF
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+10,0,0,6,0,1,0), // RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_A_PHI_COEFF
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+11,0,0,6,0,1,0), // RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_A_DIO_TEST_MODE
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+12,0,0,6,0,1,0), // RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_A_DIO_TEST_DIR
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+13,0,0,6,1,1,0), // RADIO_FE_RADIO_DIO_DIR_RADIO_A_DIO_DIR
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+14,5,0,1,0,1,0), // RADIO_FE_CTRL0_RADIO_B_DC_NOTCH_EN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+14,4,0,1,0,1,0), // RADIO_FE_CTRL0_RADIO_B_FORCE_HOST_FILTER_GAIN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+14,0,0,4,0,1,0), // RADIO_FE_CTRL0_RADIO_B_HOST_FILTER_GAIN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+15,0,0,8,0,1,0), // RADIO_FE_RSSI_DB_DEF_RADIO_B_RSSI_DB_DEFAULT_VALUE
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+16,0,0,8,0,1,0), // RADIO_FE_RSSI_DEC_DEF_RADIO_B_RSSI_DEC_DEFAULT_VALUE
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+17,0,0,8,1,1,0), // RADIO_FE_RSSI_DEC_RD_RADIO_B_RSSI_DEC_OUT
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+18,0,0,8,1,1,0), // RADIO_FE_RSSI_BB_RD_RADIO_B_RSSI_BB_OUT
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+19,0,0,4,1,1,0), // RADIO_FE_DEC_FILTER_RD_RADIO_B_DEC_FILTER_GAIN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+20,0,0,5,0,1,0), // RADIO_FE_RSSI_BB_FILTER_ALPHA_RADIO_B_RSSI_BB_FILTER_ALPHA
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+21,0,0,5,0,1,0), // RADIO_FE_RSSI_DEC_FILTER_ALPHA_RADIO_B_RSSI_DEC_FILTER_ALPHA
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+22,0,0,6,0,1,0), // RADIO_FE_IQ_COMP_AMP_COEFF_RADIO_B_AMP_COEFF
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+23,0,0,6,0,1,0), // RADIO_FE_IQ_COMP_PHI_COEFF_RADIO_B_PHI_COEFF
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+24,0,0,6,0,1,0), // RADIO_FE_RADIO_DIO_TEST_MODE_RADIO_B_DIO_TEST_MODE
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+25,0,0,6,0,1,0), // RADIO_FE_RADIO_DIO_TEST_DIR_RADIO_B_DIO_TEST_DIR
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+26,0,0,6,1,1,0), // RADIO_FE_RADIO_DIO_DIR_RADIO_B_DIO_DIR
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,7,0,1,1,1,0), // RADIO_FE_SIG_ANA_CFG_VALID
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,6,0,1,1,1,0), // RADIO_FE_SIG_ANA_CFG_BUSY
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,4,0,2,0,1,0), // RADIO_FE_SIG_ANA_CFG_DURATION
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,3,0,1,0,1,0), // RADIO_FE_SIG_ANA_CFG_FORCE_HAL_CTRL
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,2,0,1,0,1,0), // RADIO_FE_SIG_ANA_CFG_START
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,1,0,1,0,1,0), // RADIO_FE_SIG_ANA_CFG_RADIO_SEL
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+27,0,0,1,0,1,0), // RADIO_FE_SIG_ANA_CFG_EN
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+28,0,0,8,0,1,0), // RADIO_FE_SIG_ANA_FREQ_FREQ
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+29,0,0,8,1,1,0), // RADIO_FE_SIG_ANA_ABS_MSB_CORR_ABS_OUT
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+30,0,0,8,1,1,0), // RADIO_FE_SIG_ANA_ABS_LSB_CORR_ABS_OUT
    LgwReg::new(0,SX1302_REG_RADIO_FE_BASE_ADDR+31,0,0,1,1,1,0), // RADIO_FE_DUMMY_DUMMY
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+0,0,0,8,0,1,0), // OTP_BYTE_ADDR_ADDR
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+1,0,0,8,1,1,0), // OTP_RD_DATA_RD_DATA
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+2,4,0,4,1,1,0), // OTP_STATUS_CHECKSUM_STATUS
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+2,0,0,1,1,1,0), // OTP_STATUS_FSM_READY
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+3,0,0,2,0,1,0), // OTP_CFG_ACCESS_MODE
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+4,0,0,3,0,1,0), // OTP_BIT_POS_POS
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+5,4,0,4,0,1,0), // OTP_PIN_CTRL_0_TM
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+5,3,0,1,0,1,0), // OTP_PIN_CTRL_0_STROBE
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+5,2,0,1,0,1,0), // OTP_PIN_CTRL_0_PGENB
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+5,1,0,1,0,1,0), // OTP_PIN_CTRL_0_LOAD
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+5,0,0,1,0,1,0), // OTP_PIN_CTRL_0_CSB
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+6,2,0,1,0,1,0), // OTP_PIN_CTRL_1_FSCK
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+6,1,0,1,0,1,0), // OTP_PIN_CTRL_1_FSI
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+6,0,0,1,0,1,0), // OTP_PIN_CTRL_1_FRST
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+7,0,0,1,1,1,0), // OTP_PIN_STATUS_FSO
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+8,0,0,8,0,1,255), // OTP_MODEM_EN_0_MODEM_EN
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+9,0,0,8,0,1,255), // OTP_MODEM_EN_1_MODEM_EN
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+10,0,0,8,0,1,255), // OTP_MODEM_SF_EN_SF_EN
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+11,0,0,1,0,1,1), // OTP_TIMESTAMP_EN_TIMESTAMP_EN
    LgwReg::new(0,SX1302_REG_OTP_BASE_ADDR+12,0,0,1,1,1,0), // OTP_DUMMY_DUMMY
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+0,0,0,5,0,1,0), // RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_MSB_IF_FREQ_0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+1,0,0,8,0,1,128), // RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_FREQ_LSB_IF_FREQ_0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+2,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_LORA_SERVICE_RADIO_SEL_RADIO_SELECT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+3,4,0,3,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BW_START
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+3,3,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_AUTO_BW_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+3,2,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_NO_FAST_START
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+3,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_BYPASS
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+3,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG1_ENABLE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+4,3,0,3,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW_LOCKED
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+4,0,0,3,0,1,5), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG2_BW
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+5,0,0,3,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG3_BW_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+6,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DC_NOTCH_CFG4_IIR_DCC_TIME
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+7,0,1,8,0,1,2), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_0_FIR1_COEFF_0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+8,0,1,8,0,1,3), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_1_FIR1_COEFF_1
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+9,0,1,8,0,1,2), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_2_FIR1_COEFF_2
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+10,0,1,8,0,1,3), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_3_FIR1_COEFF_3
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+11,0,1,8,0,1,5), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_4_FIR1_COEFF_4
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+12,0,1,8,0,1,8), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_5_FIR1_COEFF_5
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+13,0,1,8,0,1,6), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_6_FIR1_COEFF_6
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+14,0,1,8,0,1,4), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR1_7_FIR1_COEFF_7
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+15,0,1,8,0,1,2), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_0_FIR2_COEFF_0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+16,0,1,8,0,1,-2), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_1_FIR2_COEFF_1
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+17,0,1,8,0,1,-4), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_2_FIR2_COEFF_2
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+18,0,1,8,0,1,-3), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_3_FIR2_COEFF_3
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+19,0,1,8,0,1,3), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_4_FIR2_COEFF_4
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+20,0,1,8,0,1,11), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_5_FIR2_COEFF_5
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+21,0,1,8,0,1,19), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_6_FIR2_COEFF_6
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+22,0,1,8,0,1,10), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_FIR2_7_FIR2_COEFF_7
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+23,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+23,0,0,7,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC0_RADIO_GAIN_RED_DB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+24,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_DC_COMP_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+24,3,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FORCE_DEFAULT_FIR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+24,2,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_RSSI_EARLY_LATCH
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+24,0,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC1_FREEZE_ON_SYNC
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+25,6,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_IN_COMP
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+25,5,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_DAGC_FIR_HYST
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+25,3,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MAX_SAMPLE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+25,0,0,3,0,1,2), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_AGC2_RSSI_MIN_SAMPLE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+26,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_DAGC_FIR_FAST
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+26,6,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_FORCE_GAIN_FIR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+26,4,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR1
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+26,0,0,3,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_DFE_GAIN0_GAIN_FIR2
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+27,6,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_TARGET_LVL
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+27,5,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_INCR_STEP
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+27,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_GAIN_DROP_COMP
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+27,3,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_COMB_FILTER_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+27,2,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_NO_FREEZE_START
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+27,0,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_DAGC_CFG_FREEZE_ON_SYNC
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+28,0,0,8,0,1,60), // RX_TOP_LORA_SERVICE_FSK_DAGC_CNT0_SAMPLE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+29,0,0,8,0,1,6), // RX_TOP_LORA_SERVICE_FSK_DAGC_CNT1_THR_M6
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+30,0,0,8,0,1,25), // RX_TOP_LORA_SERVICE_FSK_DAGC_CNT2_THR_M12
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+31,0,0,8,0,1,42), // RX_TOP_LORA_SERVICE_FSK_DAGC_CNT3_THR_M18
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+32,4,0,4,0,1,8), // RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+32,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DAGC_CNT4_FORCE_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+33,4,0,4,0,1,4), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_BW
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+33,0,0,4,0,1,7), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG0_MODEM_SF
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+34,6,0,2,0,1,2), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET_HDR_CTRL
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+34,4,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_PPM_OFFSET
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+34,3,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_MODEM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+34,0,0,3,0,1,2), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG1_CODING_RATE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+35,5,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_FINE_SYNCH_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+35,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_MODEM_START
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+35,2,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CADRXTX
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+35,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_IMPLICIT_HEADER
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+35,0,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG2_CRC_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+36,0,0,8,0,1,12), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG3_PAYLOAD_LENGTH
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+37,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+37,0,0,6,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG4_INT_STEP_ORIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+38,6,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_HEADER_DIFF_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+38,0,0,6,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG5_ZERO_PAD
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+39,0,0,8,0,1,8), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG6_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+40,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG7_PREAMBLE_SYMB_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+41,3,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_INT_DELAY
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+41,2,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_RX
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+41,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_AUTO_ACK_TX
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+41,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TXRX_CFG8_POST_PREAMBLE_GAP_LONG
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+42,4,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_RX_CFG0_DFT_PEAK_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+42,2,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CHIRP_INVERT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+42,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_CFG0_SWAP_IQ
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+42,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_CFG0_CONTINUOUS
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+43,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_RX_CFG1_DETECT_TIMEOUT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+44,5,0,2,0,1,2), // RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_RANGE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+44,0,0,5,0,1,22), // RX_TOP_LORA_SERVICE_FSK_RX_CFG2_AUTO_ACK_DELAY
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+45,5,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_CFG3_RESTART_ON_HDR_ERR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+45,4,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_RX_CFG3_CLK_EN_RESYNC_DIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+45,0,0,4,0,1,11), // RX_TOP_LORA_SERVICE_FSK_RX_CFG3_LLR_SCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+46,0,1,5,0,1,2), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH0_PEAK1_POS
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+47,0,1,5,0,1,4), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH1_PEAK2_POS
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+48,5,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_FINETIME_ON_LAST
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+48,4,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_AUTO_SCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+48,3,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_DROP_ON_SYNCH
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+48,2,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+48,0,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_FRAME_SYNCH2_TIMEOUT_OPT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+49,7,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_GAIN_P_HDR_RED
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+49,6,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_ROUNDING
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+49,4,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_POS_LIMIT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+49,2,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_SUM_SIZE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+49,0,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING0_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+50,6,0,2,0,1,2), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_AUTO
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+50,3,0,3,0,1,2), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PAYLOAD
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+50,0,0,3,0,1,4), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING1_GAIN_P_PREAMB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+51,6,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+51,3,0,3,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PAYLOAD
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+51,0,0,3,0,1,4), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING2_GAIN_I_PREAMB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+52,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_SUM
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+52,4,0,3,0,1,5), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_FINESYNCH_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+52,0,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING3_GAIN_I_AUTO
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+53,4,0,3,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_I_AUTO_MAX
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+53,0,0,3,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FINE_TIMING4_GAIN_P_AUTO_MAX
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+54,0,0,4,0,1,9), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME0_FREQ_TO_TIME_DRIFT_MANT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+55,0,0,8,0,1,112), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME1_FREQ_TO_TIME_DRIFT_MANT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+56,0,0,3,0,1,3), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME2_FREQ_TO_TIME_DRIFT_EXP
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+57,5,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_DELTA
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+57,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FINE_DELTA
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+57,3,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_FREQ_ERROR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+57,2,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_SYMB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+57,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_TIME_OFFSET
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+57,0,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME3_FREQ_TO_TIME_INVERT_DETECT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+58,0,0,8,0,1,33), // RX_TOP_LORA_SERVICE_FSK_FREQ_TO_TIME4_FREQ_TO_TIME_INVERT_RNG
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+59,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_FINE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+59,4,0,3,0,1,4), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_HDR_SKIP
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+59,0,0,2,0,1,3), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK0_FREQ_TRACK_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+60,4,0,3,0,1,5), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_SYNCH_GAIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+60,0,0,4,0,1,3), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK1_FREQ_TRACK_AUTO_THR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+61,5,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_SNR_MIN_WINDOW
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+61,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_GAIN_AUTO_SNR_MIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+61,0,0,4,0,1,8), // RX_TOP_LORA_SERVICE_FSK_FREQ_TRACK2_FREQ_SYNCH_THR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+62,0,0,7,0,1,24), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP0_MSP_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+63,0,0,7,0,1,48), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP1_MSP2_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+64,4,0,3,0,1,7), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP2_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+64,0,0,3,0,1,7), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP2_MSP_PEAK_NB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+65,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_MIN2
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+65,4,0,2,0,1,2), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_ACC_WIN_LEN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+65,2,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+65,0,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DETECT_MSP3_MSP_CNT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+66,7,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_USE_GAIN_SYMB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+66,0,0,7,0,1,55), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC1_ACC_PNR
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+67,6,0,2,0,1,2), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_NOISE_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+67,4,0,2,0,1,2), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_COEFF
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+67,3,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_2_SAME_PEAKS
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+67,2,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_AUTO_RESCALE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+67,1,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_POS_SEL
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+67,0,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC2_ACC_PEAK_SUM_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+68,0,0,8,0,1,11), // RX_TOP_LORA_SERVICE_FSK_DETECT_ACC3_MIN_SINGLE_PEAK
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+69,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_SEL_SNR_MIN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+69,3,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_ENABLE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+69,0,0,3,0,1,7), // RX_TOP_LORA_SERVICE_FSK_TIMESTAMP_NB_SYMB
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+70,6,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_TRANSPOSE_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+70,4,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_FSK_MODEM_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+70,2,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_TRANSPOSE_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+70,0,0,2,0,1,1), // RX_TOP_LORA_SERVICE_FSK_CLOCK_GATE_OVERRIDE_MODEM_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+71,0,0,1,1,1,0), // RX_TOP_LORA_SERVICE_FSK_DUMMY0_DUMMY0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+80,0,0,5,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_MSB_IF_FREQ_0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+81,0,0,8,0,1,128), // RX_TOP_LORA_SERVICE_FSK_FSK_FREQ_LSB_IF_FREQ_0
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+82,4,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_IBM
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+82,2,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_DCFREE_ENC
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+82,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_CRC_EN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+82,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_0_PKT_MODE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+83,6,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_ADRS_COMP
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+83,3,0,3,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_PSIZE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+83,0,0,3,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_1_CH_BW_EXPO
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+84,3,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_MODEM_INVERT_IQ
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+84,2,0,1,0,1,1), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_AUTO_AFC
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+84,1,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RADIO_SELECT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+84,0,0,1,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_3_RX_INVERT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+85,5,0,3,0,1,4), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_RSSI_LENGTH
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+85,0,0,5,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_CFG_4_ERROR_OSR_TOL
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+86,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_NODE_ADRS_NODE_ADRS
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+87,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_BROADCAST_BROADCAST
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+88,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_PKT_LENGTH_PKT_LENGTH
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+89,0,0,2,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_MSB_TIMEOUT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+90,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_TIMEOUT_LSB_TIMEOUT
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+91,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_BIT_RATE_MSB_BIT_RATE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+92,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_BIT_RATE_LSB_BIT_RATE
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+93,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE7_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+94,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE6_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+95,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE5_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+96,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE4_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+97,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE3_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+98,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE2_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+99,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE1_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+100,0,0,8,0,1,0), // RX_TOP_LORA_SERVICE_FSK_FSK_REF_PATTERN_BYTE0_FSK_REF_PATTERN
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+101,0,0,4,0,1,4), // RX_TOP_LORA_SERVICE_FSK_FSK_RSSI_FILTER_ALPHA_FSK_RSSI_FILTER_ALPHA
    LgwReg::new(0,SX1302_REG_RX_TOP_LORA_SERVICE_FSK_BASE_ADDR+102,0,0,1,1,1,0), // RX_TOP_LORA_SERVICE_FSK_DUMMY1_DUMMY1
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+0,4,0,1,0,1,0), // CAPTURE_RAM_CAPTURE_CFG_ENABLE
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+0,3,0,1,0,1,0), // CAPTURE_RAM_CAPTURE_CFG_CAPTUREWRAP
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+0,2,0,1,0,1,0), // CAPTURE_RAM_CAPTURE_CFG_CAPTUREFORCETRIGGER
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+0,1,0,1,0,1,0), // CAPTURE_RAM_CAPTURE_CFG_CAPTURESTART
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+0,0,0,1,0,1,0), // CAPTURE_RAM_CAPTURE_CFG_RAMCONFIG
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+1,0,0,5,0,1,0), // CAPTURE_RAM_CAPTURE_SOURCE_A_SOURCEMUX
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+2,0,0,5,0,1,0), // CAPTURE_RAM_CAPTURE_SOURCE_B_SOURCEMUX
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+3,0,0,8,0,1,0), // CAPTURE_RAM_CAPTURE_PERIOD_0_CAPTUREPERIOD
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+4,0,0,8,0,1,0), // CAPTURE_RAM_CAPTURE_PERIOD_1_CAPTUREPERIOD
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+5,0,0,1,1,1,0), // CAPTURE_RAM_STATUS_CAPCOMPLETE
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+6,0,0,8,1,1,0), // CAPTURE_RAM_LAST_RAM_ADDR_0_LASTRAMADDR
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+7,0,0,4,1,1,0), // CAPTURE_RAM_LAST_RAM_ADDR_1_LASTRAMADDR
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+8,0,0,2,0,1,2), // CAPTURE_RAM_CLOCK_GATE_OVERRIDE_CLK_OVERRIDE
    LgwReg::new(0,SX1302_REG_CAPTURE_RAM_BASE_ADDR+9,0,0,1,1,1,0), // CAPTURE_RAM_DUMMY0_DUMMY0
    LgwReg::new(0,0,0,0,0,0,0,0)
];



pub trait LoragwRegTrait {
    fn lgw_connect(&mut self) -> Result<()>;
    fn lgw_reg_w(&mut self,  register_id: u16,  reg_value: i32) -> Result<()>;
    fn reg_w(&mut self,  spi_mux_target: LgwSpiMuxTarget, r:LgwReg,  reg_value:i32) -> Result<()>;
    fn lgw_reg_r(&mut self, register_id: u16) -> Result<i32>;
    fn reg_r(&mut self, spi_mux_target:LgwSpiMuxTarget,  r:LgwReg) -> Result<i32>;
    fn lgw_mem_wb(&mut self,  mem_addr:u16,  data:&[u8],  size:usize)->Result<()>;
    fn lgw_wb(&mut self,  spi_mux_target:LgwSpiMuxTarget,  address: u16,  data: &[u8],  size:usize)-> Result<()>;
    fn lgw_mem_rb(&mut self,  mem_addr: u16, data:&mut [u8],  size: usize,  fifo_mode: bool)-> Result<()> ;
    fn lgw_rb(&mut self,  spi_mux_target: LgwSpiMuxTarget,  address: u16,  data:&mut [u8],  size: usize) -> Result<()>;
    fn lgw_reg_rb(&mut self,  register_id:u16,  data:&mut [u8],  size:usize)-> Result<()>;
    fn lgw_reg_wb(&mut self, register_id:u16,  data:&[u8],  size: usize) -> Result<()>;
}

const CHUNK_SIZE_MAX:usize = 256;

impl LoragwRegTrait for Hal {

    fn lgw_reg_wb(&mut self, register_id:u16,  data:&[u8],  size: usize) -> Result<()> {
    

        if size == 0 || data.is_empty() {
            error!("ERROR: BURST OF NULL LENGTH\n");
            return Err(Error::LGW_REG_ERROR.into());
        }
        if register_id >= LGW_TOTALREGS {
            error!("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");
            return Err(Error::LGW_REG_ERROR.into());
        }
    
        /* get register struct from the struct array */
        let r = LOREGS[register_id as usize].clone();
    
        /* reject write to read-only registers */
        if r.rdon {
            error!("ERROR: TRYING TO BURST WRITE A READ-ONLY REGISTER\n");
            return Err(Error::LGW_REG_ERROR.into());
        }
    
        /* do the burst write */
        if let Err(_) = self.lgw_wb(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, r.addr, data, size){
    
            error!("ERROR: COM ERROR DURING REGISTER BURST WRITE\n");
            return Err(Error::LGW_REG_ERROR.into());
        } else {
            Ok(())
        }
    }
    /* Point to a register by name and do a burst read */
    fn lgw_reg_rb(&mut self,  register_id:u16,  data:&mut [u8],  size:usize)-> Result<()> {


        if size == 0 || data.is_empty() {
            error!("ERROR: BURST OF NULL LENGTH\n");
            return Err(anyhow!("LGW_REG_ERROR"));
        }

        if register_id >= LGW_TOTALREGS {
            error!("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");
            return Err(anyhow!("LGW_REG_ERROR"));
        }

        /* get register struct from the struct array */
        let r = LOREGS[register_id as usize].clone();

        /* do the burst read */
        if let Err(_) = self.lgw_rb(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, r.addr, data, size)
        {
            error!("ERROR: COM ERROR DURING REGISTER BURST READ\n");
            return Err(anyhow!("LGW_REG_ERROR"));
        } 
        
        Ok(())

    }

    fn lgw_rb(&mut self,  spi_mux_target: LgwSpiMuxTarget,  address: u16,  data:&mut [u8],  size: usize) -> Result<()> {

        let command_size = size + 9;  /* 5 bytes: REQ metadata (MCU), 3 bytes: SPI header (SX1302), 1 byte: dummy*/
        let mut in_out_buf= vec![0u8;command_size];

    
        if data.is_empty() {
            return Err(anyhow!("LGW_REG_ERROR"))
        }
    
        /* prepare command */
        /* Request metadata */
        in_out_buf[0] = 0; /* Req ID */
        in_out_buf[1] = MCU_SPI_REQ_TYPE_READ_WRITE; /* Req type */
        in_out_buf[2] = ECmdSpiTarget::MCU_SPI_TARGET_SX1302 as u8; /* MCU -> SX1302 */
        in_out_buf[3] = ((size + 4) >> 8) as u8; /* payload size + spi_mux_target + address + dummy byte */
        in_out_buf[4] = ((size + 4) >> 0) as u8; /* payload size + spi_mux_target + address + dummy byte */
        /* RAW SPI frame */
        in_out_buf[5] = spi_mux_target as u8; /* SX1302 -> RADIO_A or RADIO_B */
        in_out_buf[6] = 0x00 | ((address >> 8) & 0x7F) as u8;
        in_out_buf[7] =        ((address >> 0) & 0xFF) as u8;
        in_out_buf[8] = 0x00; /* dummy byte */
        for i in 0 .. size {
            in_out_buf[i + 9] = data[i];
        }
    
        if self.mcu.lgw_write_mode == EComWriteMode::LGW_COM_WRITE_MODE_BULK {
            /* makes no sense to read in bulk mode, as we can't get the result */
            error!("ERROR: USB READ BURST FAILURE - bulk mode is enabled\n");
            return Err(anyhow!("LGW_REG_ERROR"))
        } else {
            self.mcu.mcu_spi_write( &mut in_out_buf)?;
        }
    
   
        trace!("Note: USB read burst success\n");

        for i in 0 .. size {
            data[i] = in_out_buf[9 + i];
        }
        
        Ok(())
    }


    /* Burst (multiple-byte) write */
    fn lgw_wb(&mut self,  spi_mux_target:LgwSpiMuxTarget,  address: u16,  data: &[u8],  size:usize)-> Result<()> {

        let command_size = size + 8; /* 5 bytes: REQ metadata (MCU), 3 bytes: SPI header (SX1302) */
        let mut in_out_buf=vec![0u8;command_size];


        if data.is_empty() {
            return Err(anyhow!("LGW_REG_ERR"));
        }

        /* prepare command */
        /* Request metadata */
        in_out_buf[0] = self.mcu.lgw_spi_req_nb; /* Req ID */
        in_out_buf[1] = MCU_SPI_REQ_TYPE_READ_WRITE; /* Req type */
        in_out_buf[2] = ECmdSpiTarget::MCU_SPI_TARGET_SX1302 as u8; /* MCU -> SX1302 */
        in_out_buf[3] = ((size + 3) >> 8) as u8; /* payload size + spi_mux_target + address */
        in_out_buf[4] = ((size + 3) >> 0) as u8; /* payload size + spi_mux_target + address */
        /* RAW SPI frame */
        in_out_buf[5] = spi_mux_target as u8; /* SX1302 -> RADIO_A or RADIO_B */
        in_out_buf[6] = 0x80 | ((address >> 8) & 0x7F) as u8;
        in_out_buf[7] =        ((address >> 0) & 0xFF) as u8;
        for i in 0 .. size {
            in_out_buf[i + 8] = data[i];
        }

        if self.mcu.lgw_write_mode == EComWriteMode::LGW_COM_WRITE_MODE_BULK {
            self.mcu.mcu_spi_store(&in_out_buf)?;
            self.mcu.lgw_spi_req_nb += 1;
        } else {
            self.mcu.mcu_spi_write( &mut in_out_buf )?;
        }
        Ok(())
    }

    fn lgw_mem_wb(&mut self,  mem_addr:u16,  data:&[u8],  size:usize)->Result<()> {

        let mut chunk_cnt = 0;
        let mut addr = mem_addr;
        let mut sz_todo = size;

        
        debug!("lgw_mem_wb");
        /* check input parameters */
        
        if data.is_empty() || size == 0 {
            error!("ERROR: BURST OF NULL LENGTH\n");
            return Err(anyhow!("LGW_REG_ERR"));
        }

        /* write memory by chunks */
        while sz_todo > 0 {
            
            /* full or partial chunk ? */
            let chunk_size = if sz_todo  > CHUNK_SIZE_MAX { CHUNK_SIZE_MAX }   else { sz_todo };
            trace!(chunk_cnt=%chunk_cnt, chunk_size=%chunk_size);

            let bulk = &data[chunk_cnt * CHUNK_SIZE_MAX  .. (chunk_cnt * CHUNK_SIZE_MAX  + chunk_size)];
            /* do the burst write */
            self.lgw_wb(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, addr, &bulk, chunk_size)?;

            /* prepare for next write */
            addr += chunk_size as u16;
            sz_todo -= chunk_size;
            chunk_cnt += 1;  
        }

        Ok(())
    }

    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

    fn lgw_mem_rb(&mut self,  mem_addr: u16, data:&mut [u8],  size: usize,  fifo_mode: bool)-> Result<()> {

        let mut chunk_cnt = 0;
        let mut addr = mem_addr;
        let mut sz_todo = size;
        


        if data.is_empty() || size == 0 {
            error!("ERROR: BURST OF NULL LENGTH\n");
            return Err(anyhow!("LGW_REG_ERR"));
        }

        /* read memory by chunks */
        while sz_todo > 0 {
            /* full or partial chunk ? */
            let chunk_size = if sz_todo  > CHUNK_SIZE_MAX as usize  { CHUNK_SIZE_MAX as usize} else { sz_todo  } ;

            let bulk = &mut data[chunk_cnt * CHUNK_SIZE_MAX  .. (chunk_cnt * CHUNK_SIZE_MAX  + chunk_size)];
            /* do the burst read */
            self.lgw_rb(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, addr,  bulk, chunk_size)?;

            /* do not increment the address when the target memory is in FIFO mode (auto-increment) */
            if fifo_mode == false {
                addr += chunk_size as u16;
            }

            /* prepare for next read */
            sz_todo -= chunk_size;
            chunk_cnt += 1;
        }

        Ok(())
    }

    fn lgw_connect(&mut self) -> Result<()> {
        let mut u= [0u8; 1];

        self.lgw_com_open()?;

        /* check SX1302 version */
        self.lgw_com_r(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, LOREGS[SX1302_REG_COMMON_VERSION_VERSION as usize].addr, &mut u, 1)?;

        info!("Note: chip version is {:02X} (v{:}.{:})", u[0], (u[0] >> 4) & 0x0F, u[0] & 0x0F) ;

        info!("Note: success connecting the concentrator");
        Ok(())
    }

    fn reg_r(&mut self, spi_mux_target:LgwSpiMuxTarget,  r:LgwReg) -> Result<i32> {
    
        let mut bufu = [0u8;4];
        
    
        if (r.offs + r.leng) <= 8 {
            /* read one byte, then shift and mask bits to get reg value with sign extension if needed */
            self.lgw_com_r(spi_mux_target, r.addr, &mut bufu, 1)?;
            bufu[1] = bufu[0] << (8 - r.leng - r.offs); /* left-align the data */
            if r.sign == true {
                let u1 = bufu[1] as i8;
                let u2 = u1 >> ( 8 - r.leng);
                return Ok(u2 as i32);
                
            } else {
                bufu[2] = bufu[1] >> (8 - r.leng); /* right align the data, no sign extension */
                return Ok(bufu[2] as i32); /* unsigned pointer -> no sign extension */
            }
        } else {
            /* register spanning multiple memory bytes but with an offset */
            error!("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");
            return Err(anyhow!("REGISTER SIZE AND OFFSET ARE NOT SUPPORTED"));
        }

    }

    fn reg_w(&mut self,  spi_mux_target: LgwSpiMuxTarget, r:LgwReg,  reg_value:i32) -> Result<()> {
        trace!(spi_mux_target=%spi_mux_target, r=%r, reg_value=%reg_value, "reg_w");
        if (r.leng == 8) && (r.offs == 0) {
            /* direct write */
            trace!("==> DIRECT WRITE @ {:04X}", r.addr);

            self.lgw_com_w(spi_mux_target, r.addr, reg_value as u8)?;
        } else if (r.offs + r.leng) <= 8 {
            /* read-modify-write */
            trace!("==> READ MODIFY WRITE @ {:04X} (offs:{:} leng:{:})\n", r.addr, r.offs, r.leng);

            self.lgw_com_rmw(spi_mux_target, r.addr, r.offs, r.leng, reg_value as u8)?;
        } else {
            trace!("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED");

        }

        Ok(())
    }

    fn lgw_reg_w(&mut self,  register_id: u16,  reg_value: i32) -> Result<()> {
        
        trace!(register_id=%register_id, reg_value=%reg_value, "lgw_reg_w: ");
        /* check input parameters */
        if register_id >= LGW_TOTALREGS as u16 {
            return Err(anyhow!("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE"))
        }

        /* get register struct from the struct array */
        let r = LOREGS[register_id as usize].clone();

        /* reject write to read-only registers */
        if r.rdon {
            return Err(anyhow!("ERROR: TRYING TO WRITE A READ-ONLY REGISTER"))
        }

        if let Err(e) = self.reg_w(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, r, reg_value) {
            error!("lgw_reg_w failed: {:} - {:}",register_id, e);
            return Err(e);
        }

        Ok(())
    }


    fn lgw_reg_r(&mut self, register_id: u16) -> Result<i32> {

        let r: LgwReg;


        if register_id >= LGW_TOTALREGS {
            error!("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");
            return Err(anyhow!("LGW_REG_ERROR"));
        }

        /* get register struct from the struct array */
        r = LOREGS[register_id as usize].clone();

        match  self.reg_r(LgwSpiMuxTarget::LGW_SPI_MUX_TARGET_SX1302, r){
            Ok(reg_value) => return Ok(reg_value),
            Err(_) => {
                error!("ERROR: COM ERROR DURING REGISTER READ\n");
                return Err(anyhow!("LGW_REG_ERROR"));
            }
        }
    }
}